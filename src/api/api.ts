/* tslint:disable */
/* eslint-disable */
/**
 * smartobserv-0.3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 服务调用span对象，每个服务每调用一次生成一个span
 * @export
 * @interface AppLogBrief
 */
export interface AppLogBrief {
    /**
     * 调用链ID
     * @type {string}
     * @memberof AppLogBrief
     */
    'traceId': string;
    /**
     * 某服务的调用跨度ID
     * @type {string}
     * @memberof AppLogBrief
     */
    'spanId': string;
    /**
     * long类型的unix时间戳（从1970-1-1 00:00:00计算的毫秒数）
     * @type {number}
     * @memberof AppLogBrief
     */
    'timestamp': number;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof AppLogBrief
     */
    'platform': NameDisplayPair;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof AppLogBrief
     */
    'application': NameDisplayPair;
    /**
     * 服务运行时跨度所在的服务接口
     * @type {string}
     * @memberof AppLogBrief
     */
    'service': string;
    /**
     * 服务运行时跨度所在的集群
     * @type {string}
     * @memberof AppLogBrief
     */
    'cluster': string;
    /**
     * 服务运行时跨度所在的实例
     * @type {string}
     * @memberof AppLogBrief
     */
    'instance': string;
    /**
     * 数字表示的日志级别
     * @type {number}
     * @memberof AppLogBrief
     */
    'severityNumber': number;
    /**
     * 文本表示的日志级别
     * @type {string}
     * @memberof AppLogBrief
     */
    'severityText': string;
    /**
     * 输出该日志的类名path
     * @type {string}
     * @memberof AppLogBrief
     */
    'scopeName': string;
    /**
     * 日志文本内容，可能很多行
     * @type {string}
     * @memberof AppLogBrief
     */
    'body': string;
}
/**
 * 服务调用span对象，每个服务每调用一次生成一个span
 * @export
 * @interface AppLogDetail
 */
export interface AppLogDetail {
    /**
     * long类型的unix时间戳（从1970-1-1 00:00:00计算的毫秒数）
     * @type {number}
     * @memberof AppLogDetail
     */
    'timestamp': number;
    /**
     * 调用链ID
     * @type {string}
     * @memberof AppLogDetail
     */
    'traceId': string;
    /**
     * 某服务的调用跨度ID
     * @type {string}
     * @memberof AppLogDetail
     */
    'spanId': string;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof AppLogDetail
     */
    'platform': NameDisplayPair;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof AppLogDetail
     */
    'application': NameDisplayPair;
    /**
     * 服务运行时跨度所在的服务接口
     * @type {string}
     * @memberof AppLogDetail
     */
    'service': string;
    /**
     * 服务运行时跨度所在的集群
     * @type {string}
     * @memberof AppLogDetail
     */
    'cluster': string;
    /**
     * 服务运行时跨度所在的实例
     * @type {string}
     * @memberof AppLogDetail
     */
    'instance': string;
    /**
     * 数字表示的日志级别
     * @type {number}
     * @memberof AppLogDetail
     */
    'severityNumber': number;
    /**
     * 文本表示的日志级别
     * @type {string}
     * @memberof AppLogDetail
     */
    'severityText': string;
    /**
     * 输出该日志的类名path
     * @type {string}
     * @memberof AppLogDetail
     */
    'scopeName': string;
    /**
     * 一个长字符串，保存报错信息
     * @type {string}
     * @memberof AppLogDetail
     */
    'body'?: string;
    /**
     * 对于抛出异常的情况，日志属性中会包含异常类、异常调用栈等信息。这是个JSON对象字符串。
     * @type {Array<KeyValuePair>}
     * @memberof AppLogDetail
     */
    'logAttributes': Array<KeyValuePair>;
    /**
     * 输出该日志的位置属性全集
     * @type {Array<KeyValuePair>}
     * @memberof AppLogDetail
     */
    'scopeAttributes': Array<KeyValuePair>;
    /**
     * 该日志捕获时，所运行的资源相关属性。
     * @type {Array<KeyValuePair>}
     * @memberof AppLogDetail
     */
    'resourceAttributes': Array<KeyValuePair>;
}
/**
 * 
 * @export
 * @interface AppLogDetailListResponse
 */
export interface AppLogDetailListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof AppLogDetailListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof AppLogDetailListResponse
     */
    'message': string;
    /**
     * 异常应用实例的列表数据
     * @type {Array<AppLogDetail>}
     * @memberof AppLogDetailListResponse
     */
    'data': Array<AppLogDetail>;
}
/**
 * 
 * @export
 * @interface AppLogListResponse
 */
export interface AppLogListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof AppLogListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof AppLogListResponse
     */
    'message': string;
    /**
     * 
     * @type {AppLogPage}
     * @memberof AppLogListResponse
     */
    'data': AppLogPage;
}
/**
 * 
 * @export
 * @interface AppLogPage
 */
export interface AppLogPage {
    /**
     * 其实是请求参数的复制
     * @type {number}
     * @memberof AppLogPage
     */
    'pageNo'?: number;
    /**
     * 其实是请求参数的复制
     * @type {number}
     * @memberof AppLogPage
     */
    'pageSize'?: number;
    /**
     * 根据记录数计算结果
     * @type {number}
     * @memberof AppLogPage
     */
    'pageCount'?: number;
    /**
     * 按条件查询结果的总记录数
     * @type {number}
     * @memberof AppLogPage
     */
    'totalCount'?: number;
    /**
     * 查询结果列表
     * @type {Array<AppLogBrief>}
     * @memberof AppLogPage
     */
    'logs'?: Array<AppLogBrief>;
}
/**
 * 
 * @export
 * @interface AppRelatedResource
 */
export interface AppRelatedResource {
    /**
     * CMDB资源ID
     * @type {string}
     * @memberof AppRelatedResource
     */
    'id': string;
    /**
     * JVM、k8s pod、k8s node、oracle、redis等
     * @type {string}
     * @memberof AppRelatedResource
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof AppRelatedResource
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AppRelatedResource
     */
    'displayName': string;
    /**
     * 资源监控页面的URL路径
     * @type {string}
     * @memberof AppRelatedResource
     */
    'monitorURL': string;
    /**
     * 显示该资源的LOGO图片URL
     * @type {string}
     * @memberof AppRelatedResource
     */
    'logo': string;
}
/**
 * 
 * @export
 * @interface CommonResponse
 */
export interface CommonResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof CommonResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof CommonResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ConditionKey
 */
export interface ConditionKey {
    /**
     * 该条件key的主键，用于后续查询取值范围时作为url path
     * @type {number}
     * @memberof ConditionKey
     */
    'id': number;
    /**
     * 用于条件查询匹配
     * @type {string}
     * @memberof ConditionKey
     */
    'name': string;
    /**
     * 用于界面显示
     * @type {string}
     * @memberof ConditionKey
     */
    'displayName': string;
    /**
     * 条件数据类型
     * @type {string}
     * @memberof ConditionKey
     */
    'dataType': ConditionKeyDataTypeEnum;
}

export const ConditionKeyDataTypeEnum = {
    NUMBER: 'N',
    STRING: 'S'
} as const;

export type ConditionKeyDataTypeEnum = typeof ConditionKeyDataTypeEnum[keyof typeof ConditionKeyDataTypeEnum];

/**
 * 
 * @export
 * @interface ConditionKeyListResponse
 */
export interface ConditionKeyListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof ConditionKeyListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof ConditionKeyListResponse
     */
    'message': string;
    /**
     * 
     * @type {Array<ConditionKey>}
     * @memberof ConditionKeyListResponse
     */
    'data'?: Array<ConditionKey>;
}
/**
 * 
 * @export
 * @interface CreateSpanSnapshotRequest
 */
export interface CreateSpanSnapshotRequest {
    /**
     * 
     * @type {Array<FieldCondition>}
     * @memberof CreateSpanSnapshotRequest
     */
    'fieldConditions': Array<FieldCondition>;
    /**
     * 按服务状态的指定条件筛选
     * @type {Array<StatusCondition>}
     * @memberof CreateSpanSnapshotRequest
     */
    'statusConditions'?: Array<StatusCondition>;
    /**
     * 
     * @type {TimeRange}
     * @memberof CreateSpanSnapshotRequest
     */
    'timeCondition': TimeRange;
    /**
     * 
     * @type {QueryForType}
     * @memberof CreateSpanSnapshotRequest
     */
    'for': QueryForType;
}


/**
 * 时延区间，为空表示不限
 * @export
 * @interface DurationRange
 */
export interface DurationRange {
    /**
     * 时延区间最小值，单位是毫秒
     * @type {number}
     * @memberof DurationRange
     */
    'min': number;
    /**
     * 时延区间最大值，单位是毫秒
     * @type {number}
     * @memberof DurationRange
     */
    'max': number;
}
/**
 * 
 * @export
 * @interface DurationTrend
 */
export interface DurationTrend {
    /**
     * 时延趋势的起始时间，UNIX时间戳
     * @type {number}
     * @memberof DurationTrend
     */
    'fromTime': number;
    /**
     * 时延趋势的截止时间，UNIX时间戳
     * @type {number}
     * @memberof DurationTrend
     */
    'toTime': number;
    /**
     * 时延趋势时间颗粒度，单位是秒。如果请求时未指定，则这里给出服务端自动计算的颗粒度。
     * @type {number}
     * @memberof DurationTrend
     */
    'granularity': number;
    /**
     * 
     * @type {Array<Percentile>}
     * @memberof DurationTrend
     */
    'percentile': Array<Percentile>;
    /**
     * 二维数组
     * @type {Array<Array<number>>}
     * @memberof DurationTrend
     */
    'traceDurations': Array<Array<number>>;
    /**
     * 二维数组
     * @type {Array<Array<number>>}
     * @memberof DurationTrend
     */
    'selfDurations': Array<Array<number>>;
    /**
     * 二维数组
     * @type {Array<Array<number>>}
     * @memberof DurationTrend
     */
    'gaps': Array<Array<number>>;
}
/**
 * 
 * @export
 * @interface DurationTrendResponse
 */
export interface DurationTrendResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof DurationTrendResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof DurationTrendResponse
     */
    'message': string;
    /**
     * 
     * @type {DurationTrend}
     * @memberof DurationTrendResponse
     */
    'data': DurationTrend;
}
/**
 * 包含1-自身时延，2-gap时延，3-Trace时延
 * @export
 * @enum {string}
 */

export const DurationType = {
    SelfDuration: 'SELF_DURATION',
    Gap: 'GAP',
    TraceDuration: 'TRACE_DURATION'
} as const;

export type DurationType = typeof DurationType[keyof typeof DurationType];


/**
 * 
 * @export
 * @interface FaultTrend
 */
export interface FaultTrend {
    /**
     * Unix时间戳
     * @type {number}
     * @memberof FaultTrend
     */
    'fromTime': number;
    /**
     * Unix时间戳
     * @type {number}
     * @memberof FaultTrend
     */
    'toTime': number;
    /**
     * 返回数据的时间颗粒度，单位秒
     * @type {number}
     * @memberof FaultTrend
     */
    'granularity': number;
    /**
     * 
     * @type {Array<GraphPointData>}
     * @memberof FaultTrend
     */
    'values': Array<GraphPointData>;
}
/**
 * 
 * @export
 * @interface FaultTrendResponse
 */
export interface FaultTrendResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof FaultTrendResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof FaultTrendResponse
     */
    'message': string;
    /**
     * 
     * @type {FaultTrend}
     * @memberof FaultTrendResponse
     */
    'data': FaultTrend;
}
/**
 * span属性字段条件列表。默认现在只支持所有条件的AND组合
 * @export
 * @interface FieldCondition
 */
export interface FieldCondition {
    /**
     * 搜索条件的span属性字段名称
     * @type {string}
     * @memberof FieldCondition
     */
    'name': string;
    /**
     * 诸如：>=，<>, contains, starts-with等操作符
     * @type {string}
     * @memberof FieldCondition
     */
    'operator': string;
    /**
     * 实际上可能是字符串、数字、字符数字的json数组
     * @type {string}
     * @memberof FieldCondition
     */
    'value': string;
}
/**
 * span属性字段条件列表。默认现在只支持所有条件的AND组合
 * @export
 * @interface FieldConditionResponse
 */
export interface FieldConditionResponse {
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof FieldConditionResponse
     */
    'name': NameDisplayPair;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof FieldConditionResponse
     */
    'operator': NameDisplayPair;
    /**
     * 实际上可能是字符串、数字、字符数字的json数组
     * @type {string}
     * @memberof FieldConditionResponse
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface GraphPointData
 */
export interface GraphPointData {
    /**
     * 在趋势图、热点图上显示时，某个图形点的业务失败次数。
     * @type {number}
     * @memberof GraphPointData
     */
    'businessFaultCount': number;
    /**
     * 在趋势图、热点图上显示时，某个图形点的系统失败次数。
     * @type {number}
     * @memberof GraphPointData
     */
    'systemFaultCount': number;
    /**
     * 在热点图上显示时，某个图形点的业务成功次数。
     * @type {number}
     * @memberof GraphPointData
     */
    'successCount'?: number;
}
/**
 * 可能是列表，也可能是对象，也可能不返回。
 * @export
 * @interface Heatmap
 */
export interface Heatmap {
    /**
     * Unix时间戳
     * @type {number}
     * @memberof Heatmap
     */
    'fromTime'?: number;
    /**
     * Unix时间戳
     * @type {number}
     * @memberof Heatmap
     */
    'toTime'?: number;
    /**
     * 时延起始值，单位ms
     * @type {number}
     * @memberof Heatmap
     */
    'fromDuration': number;
    /**
     * 时延截止值，单位ms
     * @type {number}
     * @memberof Heatmap
     */
    'toDuration': number;
    /**
     * 返回数据的时间颗粒度，单位秒
     * @type {number}
     * @memberof Heatmap
     */
    'timeGranularity': number;
    /**
     * 返回数据的时延颗粒度，单位毫秒
     * @type {number}
     * @memberof Heatmap
     */
    'durationGranularity': number;
    /**
     * 
     * @type {Array<Array<GraphPointData>>}
     * @memberof Heatmap
     */
    'values'?: Array<Array<GraphPointData>>;
}
/**
 * 
 * @export
 * @interface HeatmapResponse
 */
export interface HeatmapResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof HeatmapResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof HeatmapResponse
     */
    'message': string;
    /**
     * 
     * @type {Heatmap}
     * @memberof HeatmapResponse
     */
    'data': Heatmap;
}
/**
 * 
 * @export
 * @interface InitialCauseAppInstance
 */
export interface InitialCauseAppInstance {
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof InitialCauseAppInstance
     */
    'platform': NameDisplayPair;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof InitialCauseAppInstance
     */
    'application': NameDisplayPair;
    /**
     * 服务运行时跨度所在的集群
     * @type {string}
     * @memberof InitialCauseAppInstance
     */
    'cluster': string;
    /**
     * 服务运行时跨度所在的实例
     * @type {string}
     * @memberof InitialCauseAppInstance
     */
    'instance': string;
    /**
     * 
     * @type {SpanKind}
     * @memberof InitialCauseAppInstance
     */
    'spanKind': SpanKind;
    /**
     * 该Span运行所在的软件名称。对于CLIENT类型span，需要识别该类型span调用的是哪个软件；对于其它类型span，需要识别该软件运行所在的软件类型。
     * @type {string}
     * @memberof InitialCauseAppInstance
     */
    'software': string;
    /**
     * 
     * @type {string}
     * @memberof InitialCauseAppInstance
     */
    'serviceName': string;
    /**
     * 该Span所执行的操作名称，可能是RESTful PATH、java方法名、数据库操作命令等。
     * @type {string}
     * @memberof InitialCauseAppInstance
     */
    'spanName': string;
    /**
     * 该应用实例出现异常调用的次数
     * @type {number}
     * @memberof InitialCauseAppInstance
     */
    'exceptionCount': number;
    /**
     * 该应用实例总共被调用的次数
     * @type {number}
     * @memberof InitialCauseAppInstance
     */
    'callCount': number;
    /**
     * 该应用对应服务的red监控页面
     * @type {string}
     * @memberof InitialCauseAppInstance
     */
    'serviceMonitorUrl': string;
    /**
     * 该应用实例关联的资源列表
     * @type {Array<AppRelatedResource>}
     * @memberof InitialCauseAppInstance
     */
    'resources': Array<AppRelatedResource>;
}


/**
 * 
 * @export
 * @interface InitialCauseAppInstanceListResponse
 */
export interface InitialCauseAppInstanceListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof InitialCauseAppInstanceListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof InitialCauseAppInstanceListResponse
     */
    'message': string;
    /**
     * 异常应用实例的列表数据
     * @type {Array<InitialCauseAppInstance>}
     * @memberof InitialCauseAppInstanceListResponse
     */
    'data': Array<InitialCauseAppInstance>;
}
/**
 * 
 * @export
 * @interface InitialCauseSpan
 */
export interface InitialCauseSpan {
    /**
     * 
     * @type {string}
     * @memberof InitialCauseSpan
     */
    'traceId': string;
    /**
     * 
     * @type {string}
     * @memberof InitialCauseSpan
     */
    'spanId': string;
    /**
     * 
     * @type {string}
     * @memberof InitialCauseSpan
     */
    'rootServiceName': string;
    /**
     * 
     * @type {string}
     * @memberof InitialCauseSpan
     */
    'rootSpanName': string;
    /**
     * 
     * @type {string}
     * @memberof InitialCauseSpan
     */
    'serviceName': string;
    /**
     * 
     * @type {string}
     * @memberof InitialCauseSpan
     */
    'spanName': string;
    /**
     * 
     * @type {SpanKind}
     * @memberof InitialCauseSpan
     */
    'spanKind'?: SpanKind;
    /**
     * 
     * @type {SpanStatus}
     * @memberof InitialCauseSpan
     */
    'status': SpanStatus;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof InitialCauseSpan
     */
    'platform': NameDisplayPair;
    /**
     * 
     * @type {string}
     * @memberof InitialCauseSpan
     */
    'cluster': string;
    /**
     * 
     * @type {string}
     * @memberof InitialCauseSpan
     */
    'instance': string;
    /**
     * 
     * @type {number}
     * @memberof InitialCauseSpan
     */
    'timestamp': number;
    /**
     * 
     * @type {number}
     * @memberof InitialCauseSpan
     */
    'duration': number;
    /**
     * 
     * @type {number}
     * @memberof InitialCauseSpan
     */
    'gap': number;
    /**
     * 
     * @type {number}
     * @memberof InitialCauseSpan
     */
    'selfDuration': number;
    /**
     * 
     * @type {string}
     * @memberof InitialCauseSpan
     */
    'localAddress': string;
    /**
     * 
     * @type {string}
     * @memberof InitialCauseSpan
     */
    'peerAddress': string;
}


/**
 * 
 * @export
 * @interface InitialCauseSpanListResponse
 */
export interface InitialCauseSpanListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof InitialCauseSpanListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof InitialCauseSpanListResponse
     */
    'message': string;
    /**
     * 
     * @type {InitialCauseSpanPage}
     * @memberof InitialCauseSpanListResponse
     */
    'data': InitialCauseSpanPage;
}
/**
 * 
 * @export
 * @interface InitialCauseSpanPage
 */
export interface InitialCauseSpanPage {
    /**
     * 其实是请求参数的复制
     * @type {number}
     * @memberof InitialCauseSpanPage
     */
    'pageNo'?: number;
    /**
     * 其实是请求参数的复制
     * @type {number}
     * @memberof InitialCauseSpanPage
     */
    'pageSize'?: number;
    /**
     * 根据记录数计算结果
     * @type {number}
     * @memberof InitialCauseSpanPage
     */
    'pageCount'?: number;
    /**
     * 按条件查询结果的总记录数
     * @type {number}
     * @memberof InitialCauseSpanPage
     */
    'totalCount'?: number;
    /**
     * 查询结果列表
     * @type {Array<InitialCauseSpan>}
     * @memberof InitialCauseSpanPage
     */
    'spans'?: Array<InitialCauseSpan>;
}
/**
 * 
 * @export
 * @interface InstanceListResponse
 */
export interface InstanceListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof InstanceListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof InstanceListResponse
     */
    'message': string;
    /**
     * 
     * @type {Array<InstanceResponse>}
     * @memberof InstanceListResponse
     */
    'data': Array<InstanceResponse>;
}
/**
 * 
 * @export
 * @interface InstanceRedData
 */
export interface InstanceRedData {
    /**
     * 
     * @type {string}
     * @memberof InstanceRedData
     */
    'serviceName': string;
    /**
     * 
     * @type {string}
     * @memberof InstanceRedData
     */
    'spanName': string;
    /**
     * 
     * @type {number}
     * @memberof InstanceRedData
     */
    'calls': number;
    /**
     * 
     * @type {number}
     * @memberof InstanceRedData
     */
    'successRate': number;
    /**
     * 
     * @type {number}
     * @memberof InstanceRedData
     */
    'durationP90': number;
}
/**
 * 
 * @export
 * @interface InstanceRedResponse
 */
export interface InstanceRedResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof InstanceRedResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof InstanceRedResponse
     */
    'message': string;
    /**
     * 
     * @type {Array<InstanceRedData>}
     * @memberof InstanceRedResponse
     */
    'data': Array<InstanceRedData>;
}
/**
 * 
 * @export
 * @interface InstanceResponse
 */
export interface InstanceResponse {
    /**
     * 名称
     * @type {string}
     * @memberof InstanceResponse
     */
    'name': string;
    /**
     * 
     * @type {Array<AppRelatedResource>}
     * @memberof InstanceResponse
     */
    'resources': Array<AppRelatedResource>;
}
/**
 * 
 * @export
 * @interface KeyValuePair
 */
export interface KeyValuePair {
    /**
     * 
     * @type {string}
     * @memberof KeyValuePair
     */
    'key': string;
    /**
     * 字符串、数字、json，或字符串、数字、json的数组
     * @type {string}
     * @memberof KeyValuePair
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface NameDisplayListResponse
 */
export interface NameDisplayListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof NameDisplayListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof NameDisplayListResponse
     */
    'message': string;
    /**
     * 
     * @type {Array<NameDisplayPair>}
     * @memberof NameDisplayListResponse
     */
    'data': Array<NameDisplayPair>;
}
/**
 * 
 * @export
 * @interface NameDisplayPair
 */
export interface NameDisplayPair {
    /**
     * 
     * @type {string}
     * @memberof NameDisplayPair
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof NameDisplayPair
     */
    'displayName': string;
}
/**
 * P50, P75, P90, P99
 * @export
 * @enum {string}
 */

export const Percentile = {
    P50: 'P50',
    P75: 'P75',
    P90: 'P90',
    P99: 'P99'
} as const;

export type Percentile = typeof Percentile[keyof typeof Percentile];


/**
 * 
 * @export
 * @interface QueryConditions
 */
export interface QueryConditions {
    /**
     * 
     * @type {Array<FieldCondition>}
     * @memberof QueryConditions
     */
    'fieldConditions': Array<FieldCondition>;
    /**
     * 按服务状态的指定条件筛选
     * @type {Array<StatusCondition>}
     * @memberof QueryConditions
     */
    'statusConditions'?: Array<StatusCondition>;
    /**
     * 
     * @type {TimeRange}
     * @memberof QueryConditions
     */
    'timeCondition': TimeRange;
    /**
     * 
     * @type {QueryForType}
     * @memberof QueryConditions
     */
    'for': QueryForType;
}


/**
 * 1-span条件搜索，2-日志条件搜索。
 * @export
 * @enum {string}
 */

export const QueryForType = {
    /**
    * trace模板
    */
    TRACE: 1,
    /**
    * log模板
    */
    LOG: 2
} as const;

export type QueryForType = typeof QueryForType[keyof typeof QueryForType];


/**
 * 
 * @export
 * @interface QueryTemplate
 */
export interface QueryTemplate {
    /**
     * 模板编码
     * @type {number}
     * @memberof QueryTemplate
     */
    'id': number;
    /**
     * 模板名称
     * @type {string}
     * @memberof QueryTemplate
     */
    'name': string;
    /**
     * 
     * @type {Array<FieldConditionResponse>}
     * @memberof QueryTemplate
     */
    'fieldConditions': Array<FieldConditionResponse>;
    /**
     * 按服务状态的指定条件筛选
     * @type {Array<StatusCondition>}
     * @memberof QueryTemplate
     */
    'statusConditions'?: Array<StatusCondition>;
    /**
     * 
     * @type {TimeRange}
     * @memberof QueryTemplate
     */
    'timeCondition': TimeRange;
    /**
     * 
     * @type {QueryForType}
     * @memberof QueryTemplate
     */
    'for': QueryForType;
}


/**
 * 
 * @export
 * @interface QueryTemplateListResponse
 */
export interface QueryTemplateListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof QueryTemplateListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof QueryTemplateListResponse
     */
    'message': string;
    /**
     * 可能是列表，也可能是对象，也可能不返回。
     * @type {Array<QueryTemplate>}
     * @memberof QueryTemplateListResponse
     */
    'data'?: Array<QueryTemplate>;
}
/**
 * 
 * @export
 * @interface QueryTemplateRequest
 */
export interface QueryTemplateRequest {
    /**
     * 搜索条件的模板名称，用来标识模板信息
     * @type {string}
     * @memberof QueryTemplateRequest
     */
    'name': string;
    /**
     * 
     * @type {Array<FieldCondition>}
     * @memberof QueryTemplateRequest
     */
    'fieldConditions': Array<FieldCondition>;
    /**
     * 按服务状态的指定条件筛选
     * @type {Array<StatusCondition>}
     * @memberof QueryTemplateRequest
     */
    'statusConditions'?: Array<StatusCondition>;
    /**
     * 
     * @type {TimeRange}
     * @memberof QueryTemplateRequest
     */
    'timeCondition': TimeRange;
    /**
     * 
     * @type {QueryForType}
     * @memberof QueryTemplateRequest
     */
    'for': QueryForType;
}


/**
 * 
 * @export
 * @interface QueryTemplateResponse
 */
export interface QueryTemplateResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof QueryTemplateResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof QueryTemplateResponse
     */
    'message': string;
    /**
     * 
     * @type {QueryTemplate}
     * @memberof QueryTemplateResponse
     */
    'data'?: QueryTemplate;
}
/**
 * 服务诊断时，如果有报错，则返回该报错解析结果。
 * @export
 * @interface ServiceErrorDiagnosisResponse
 */
export interface ServiceErrorDiagnosisResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof ServiceErrorDiagnosisResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof ServiceErrorDiagnosisResponse
     */
    'message': string;
    /**
     * 
     * @type {ServiceErrorDiagnosisResponseData}
     * @memberof ServiceErrorDiagnosisResponse
     */
    'data': ServiceErrorDiagnosisResponseData;
}
/**
 * 
 * @export
 * @interface ServiceErrorDiagnosisResponseData
 */
export interface ServiceErrorDiagnosisResponseData {
    /**
     * 有报错的服务span总记录数
     * @type {number}
     * @memberof ServiceErrorDiagnosisResponseData
     */
    'spanCount': number;
    /**
     * 针对参与解析的服务报错记录，解析出来的异常分类数组
     * @type {Array<ServiceExceptionCategory>}
     * @memberof ServiceErrorDiagnosisResponseData
     */
    'categories': Array<ServiceExceptionCategory>;
}
/**
 * 服务报错解析结果的每类异常信息
 * @export
 * @interface ServiceExceptionCategory
 */
export interface ServiceExceptionCategory {
    /**
     * 可观测后台配置的异常分类ID
     * @type {number}
     * @memberof ServiceExceptionCategory
     */
    'categoryId': number;
    /**
     * 可观测后台配置的异常分类名称
     * @type {string}
     * @memberof ServiceExceptionCategory
     */
    'categoryName': string;
    /**
     * 该异常分类下服务span记录数
     * @type {number}
     * @memberof ServiceExceptionCategory
     */
    'spanCount': number;
    /**
     * 该分组下出现的异常列表
     * @type {Array<ServiceExceptionInfo>}
     * @memberof ServiceExceptionCategory
     */
    'exceptions': Array<ServiceExceptionInfo>;
}
/**
 * 服务报错解析结果的每类异常下的每个异常信息
 * @export
 * @interface ServiceExceptionInfo
 */
export interface ServiceExceptionInfo {
    /**
     * 可观测后台配置的异常ID
     * @type {number}
     * @memberof ServiceExceptionInfo
     */
    'exceptionId': number;
    /**
     * 可观测后台配置的异常名称
     * @type {string}
     * @memberof ServiceExceptionInfo
     */
    'exceptionName': string;
    /**
     * 被解析出该异常类型的根因异常日志文本
     * @type {string}
     * @memberof ServiceExceptionInfo
     */
    'rootExceptionBody': string;
    /**
     * 该异常对应的span记录数
     * @type {number}
     * @memberof ServiceExceptionInfo
     */
    'spanCount': number;
}
/**
 * 
 * @export
 * @interface ServiceMap
 */
export interface ServiceMap {
    /**
     * 通过数组的形式，列出来所有节点的列表
     * @type {Array<ServiceMapNode>}
     * @memberof ServiceMap
     */
    'nodes': Array<ServiceMapNode>;
    /**
     * 通过数组的形式，列出来所有服务地图的边长。
     * @type {Array<ServiceMapEdge>}
     * @memberof ServiceMap
     */
    'edges': Array<ServiceMapEdge>;
}
/**
 * 
 * @export
 * @interface ServiceMapEdge
 */
export interface ServiceMapEdge {
    /**
     * 服务地图边长的起点的应用集群编码（K8S API获取）
     * @type {string}
     * @memberof ServiceMapEdge
     */
    'fromCluster': string;
    /**
     * 服务地图边长的终点的应用集群编码（K8S API获取）
     * @type {string}
     * @memberof ServiceMapEdge
     */
    'toCluster': string;
    /**
     * 显示在边长上的集群间span调用时延值，单位毫秒。该时延值具体显示平均、还是P50、还是P75、还是P90等时延，取决于系统后台配置参数dag_latency。
     * @type {number}
     * @memberof ServiceMapEdge
     */
    'duration': number;
    /**
     * 显示在边长上的集群间span调用的总次数。
     * @type {number}
     * @memberof ServiceMapEdge
     */
    'callCount': number;
    /**
     * 
     * @type {number}
     * @memberof ServiceMapEdge
     */
    'successCount': number;
    /**
     * 
     * @type {number}
     * @memberof ServiceMapEdge
     */
    'businessFaultCount': number;
    /**
     * 
     * @type {number}
     * @memberof ServiceMapEdge
     */
    'systemFaultCount': number;
}
/**
 * 
 * @export
 * @interface ServiceMapNode
 */
export interface ServiceMapNode {
    /**
     * 服务地图的节点名称，使用应用集群编码（K8S API获取）标识。
     * @type {string}
     * @memberof ServiceMapNode
     */
    'cluster': string;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof ServiceMapNode
     */
    'platform': NameDisplayPair;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof ServiceMapNode
     */
    'software': NameDisplayPair;
    /**
     * 该节点运行的程序类型，有app-cluster，software两种
     * @type {string}
     * @memberof ServiceMapNode
     */
    'type': ServiceMapNodeTypeEnum;
    /**
     * 该服务地图的集群节点下，满足查询条件的应用实例数量。
     * @type {number}
     * @memberof ServiceMapNode
     */
    'instanceCount': number;
    /**
     * 该集群在指定条件下的span被调用总成功次数。
     * @type {number}
     * @memberof ServiceMapNode
     */
    'successCount': number;
    /**
     * 该集群在指定条件下的span被调用总系统报错次数。
     * @type {number}
     * @memberof ServiceMapNode
     */
    'systemFaultCount': number;
    /**
     * 该集群在指定条件下的span被调用总业务报错次数。
     * @type {number}
     * @memberof ServiceMapNode
     */
    'businessFaultCount': number;
}

export const ServiceMapNodeTypeEnum = {
    AppCluster: 'APP_CLUSTER',
    Software: 'SOFTWARE'
} as const;

export type ServiceMapNodeTypeEnum = typeof ServiceMapNodeTypeEnum[keyof typeof ServiceMapNodeTypeEnum];

/**
 * 
 * @export
 * @interface ServiceMapRequest
 */
export interface ServiceMapRequest {
    /**
     * 
     * @type {TimeRange}
     * @memberof ServiceMapRequest
     */
    'timeCondition': TimeRange;
    /**
     * 从K8S api或自定义的获得的数据中心平面编码
     * @type {string}
     * @memberof ServiceMapRequest
     */
    'platform': string;
    /**
     * 从k8s API获得的应用集群编码。原则上，全系统的应用集群编码是唯一的。
     * @type {string}
     * @memberof ServiceMapRequest
     */
    'cluster': string;
    /**
     * 用于计算数据层次
     * @type {number}
     * @memberof ServiceMapRequest
     */
    'entranceDepth': number;
    /**
     * 用于计算数据层次
     * @type {number}
     * @memberof ServiceMapRequest
     */
    'exitDepth': number;
}
/**
 * 
 * @export
 * @interface ServiceMapResponse
 */
export interface ServiceMapResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof ServiceMapResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof ServiceMapResponse
     */
    'message': string;
    /**
     * 
     * @type {ServiceMapResponseData}
     * @memberof ServiceMapResponse
     */
    'data'?: ServiceMapResponseData;
}
/**
 * 可能是列表，也可能是对象，也可能不返回。
 * @export
 * @interface ServiceMapResponseData
 */
export interface ServiceMapResponseData {
    /**
     * 通过数组的形式，列出来所有节点的列表
     * @type {Array<ServiceMapNode>}
     * @memberof ServiceMapResponseData
     */
    'nodes': Array<ServiceMapNode>;
    /**
     * 通过数组的形式，列出来所有服务地图的边长。
     * @type {Array<ServiceMapEdge>}
     * @memberof ServiceMapResponseData
     */
    'edges': Array<ServiceMapEdge>;
}
/**
 * 
 * @export
 * @interface SnapshotResponse
 */
export interface SnapshotResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof SnapshotResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof SnapshotResponse
     */
    'message': string;
    /**
     * 返回快照ID
     * @type {string}
     * @memberof SnapshotResponse
     */
    'data': string;
}
/**
 * 
 * @export
 * @interface Software
 */
export interface Software {
    /**
     * 软件名称
     * @type {string}
     * @memberof Software
     */
    'name': string;
    /**
     * 软件显示名称
     * @type {string}
     * @memberof Software
     */
    'displayName': string;
    /**
     * 用于显示软件LOGO的图片文件PATH
     * @type {string}
     * @memberof Software
     */
    'logo': string;
}
/**
 * 
 * @export
 * @interface SoftwareListResponse
 */
export interface SoftwareListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof SoftwareListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof SoftwareListResponse
     */
    'message': string;
    /**
     * 
     * @type {Array<Software>}
     * @memberof SoftwareListResponse
     */
    'data': Array<Software>;
}
/**
 * 用于标注该属性是span五类属性的哪一类：基本信息、span属性、resource属性、request属性、response属性。
 * @export
 * @enum {string}
 */

export const SpanAttributeType = {
    BASIC: 1,
    SPAN: 2,
    RESOURCE: 3,
    REQUEST: 4,
    RESPONSE: 5
} as const;

export type SpanAttributeType = typeof SpanAttributeType[keyof typeof SpanAttributeType];


/**
 * 
 * @export
 * @interface SpanBrief
 */
export interface SpanBrief {
    /**
     * long类型的unix时间戳（从1970-1-1 00:00:00计算的毫秒数）
     * @type {number}
     * @memberof SpanBrief
     */
    'timestamp'?: number;
    /**
     * 调用链ID
     * @type {string}
     * @memberof SpanBrief
     */
    'traceId': string;
    /**
     * 某服务的调用跨度ID
     * @type {string}
     * @memberof SpanBrief
     */
    'spanId': string;
    /**
     * 某服务的上级调用跨度ID
     * @type {string}
     * @memberof SpanBrief
     */
    'parentSpanId': string;
    /**
     * 
     * @type {string}
     * @memberof SpanBrief
     */
    'serviceName': string;
    /**
     * 该Span所执行的操作名称，可能是RESTful PATH、java方法名、数据库操作命令等。
     * @type {string}
     * @memberof SpanBrief
     */
    'spanName'?: string;
    /**
     * 
     * @type {SpanKind}
     * @memberof SpanBrief
     */
    'spanKind': SpanKind;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof SpanBrief
     */
    'software'?: NameDisplayPair;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof SpanBrief
     */
    'application': NameDisplayPair;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof SpanBrief
     */
    'platform': NameDisplayPair;
    /**
     * 服务运行时跨度所在的集群
     * @type {string}
     * @memberof SpanBrief
     */
    'cluster': string;
    /**
     * 服务运行时跨度所在的实例
     * @type {string}
     * @memberof SpanBrief
     */
    'instance'?: string;
    /**
     * 服务跨度运行时延（单位：毫秒）
     * @type {number}
     * @memberof SpanBrief
     */
    'duration': number;
    /**
     * 
     * @type {SpanStatus}
     * @memberof SpanBrief
     */
    'status'?: SpanStatus;
    /**
     * 显示该Span关联的日志数量
     * @type {number}
     * @memberof SpanBrief
     */
    'logCount'?: number;
}


/**
 * 
 * @export
 * @interface SpanCommonality
 */
export interface SpanCommonality {
    /**
     * 
     * @type {SpanAttributeType}
     * @memberof SpanCommonality
     */
    'type': SpanAttributeType;
    /**
     * 用于系统处理的属性名称，符合OTEL语义规范
     * @type {string}
     * @memberof SpanCommonality
     */
    'name': string;
    /**
     * 该系统属性字段的显示名称。如：k8s.deplolyment.name显示为“应用集群”
     * @type {string}
     * @memberof SpanCommonality
     */
    'displayName': string;
    /**
     * 计算出该共有属性下的span统计量，可能是span计数、也可能是占比等。
     * @type {Array<SpanCommonalityValue>}
     * @memberof SpanCommonality
     */
    'values': Array<SpanCommonalityValue>;
}


/**
 * 
 * @export
 * @interface SpanCommonalityListResponse
 */
export interface SpanCommonalityListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof SpanCommonalityListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof SpanCommonalityListResponse
     */
    'message': string;
    /**
     * 
     * @type {Array<SpanCommonality>}
     * @memberof SpanCommonalityListResponse
     */
    'data': Array<SpanCommonality>;
}
/**
 * 
 * @export
 * @interface SpanCommonalityValue
 */
export interface SpanCommonalityValue {
    /**
     * 某共有属性（如：集群编码等）可显示的具体值编码（如：busi-ord-exe等）
     * @type {string}
     * @memberof SpanCommonalityValue
     */
    'code': string;
    /**
     * 某共有属性（如：集群编码等）的统计值，可能是计数、也可能是比例等。用于在共有属性累积柱状图中显示该属性、在该编码值下的柱子高度。
     * @type {number}
     * @memberof SpanCommonalityValue
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface SpanDetail
 */
export interface SpanDetail {
    /**
     * long类型的unix时间戳（从1970-1-1 00:00:00计算的毫秒数）
     * @type {number}
     * @memberof SpanDetail
     */
    'timestamp'?: number;
    /**
     * 调用链ID
     * @type {string}
     * @memberof SpanDetail
     */
    'traceId': string;
    /**
     * 某服务的调用跨度ID
     * @type {string}
     * @memberof SpanDetail
     */
    'spanId': string;
    /**
     * 某服务的上级调用跨度ID
     * @type {string}
     * @memberof SpanDetail
     */
    'parentSpanId': string;
    /**
     * 
     * @type {string}
     * @memberof SpanDetail
     */
    'serviceName': string;
    /**
     * 该Span所执行的操作名称，可能是RESTful PATH、java方法名、数据库操作命令等。
     * @type {string}
     * @memberof SpanDetail
     */
    'spanName'?: string;
    /**
     * 
     * @type {SpanKind}
     * @memberof SpanDetail
     */
    'spanKind': SpanKind;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof SpanDetail
     */
    'software': NameDisplayPair;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof SpanDetail
     */
    'application': NameDisplayPair;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof SpanDetail
     */
    'platform': NameDisplayPair;
    /**
     * 服务运行时跨度所在的集群
     * @type {string}
     * @memberof SpanDetail
     */
    'cluster': string;
    /**
     * 服务运行时跨度所在的实例
     * @type {string}
     * @memberof SpanDetail
     */
    'instance'?: string;
    /**
     * 服务跨度运行时延（单位：毫秒）
     * @type {number}
     * @memberof SpanDetail
     */
    'duration': number;
    /**
     * 
     * @type {SpanStatus}
     * @memberof SpanDetail
     */
    'status'?: SpanStatus;
    /**
     * 以键值对列表方式表达的span属性全集
     * @type {Array<KeyValuePair>}
     * @memberof SpanDetail
     */
    'spanAttributes': Array<KeyValuePair>;
    /**
     * 以键值对列表方式表达的resource属性全集
     * @type {Array<KeyValuePair>}
     * @memberof SpanDetail
     */
    'resourceAttributes': Array<KeyValuePair>;
    /**
     * HTTP请求时输入的属性
     * @type {Array<KeyValuePair>}
     * @memberof SpanDetail
     */
    'requestAttributes': Array<KeyValuePair>;
    /**
     * HTTP响应时输出的属性
     * @type {Array<KeyValuePair>}
     * @memberof SpanDetail
     */
    'responseAttributes': Array<KeyValuePair>;
    /**
     * 
     * @type {Array<AppLogDetail>}
     * @memberof SpanDetail
     */
    'logs': Array<AppLogDetail>;
}


/**
 * 
 * @export
 * @interface SpanDetailResponse
 */
export interface SpanDetailResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof SpanDetailResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof SpanDetailResponse
     */
    'message': string;
    /**
     * 
     * @type {SpanDetail}
     * @memberof SpanDetailResponse
     */
    'data': SpanDetail;
}
/**
 * 
 * @export
 * @interface SpanGroup
 */
export interface SpanGroup {
    /**
     * span分组后每组的快照ID
     * @type {string}
     * @memberof SpanGroup
     */
    'snapshotId': string;
    /**
     * 根据分组属性分组后，每组的分组取值标签列表
     * @type {Array<string>}
     * @memberof SpanGroup
     */
    'labels': Array<string>;
    /**
     * 该组span中，呈现为异常（报错或超时）的span数量。
     * @type {number}
     * @memberof SpanGroup
     */
    'innormalCount': number;
    /**
     * 该组span中，所有span的数量。
     * @type {number}
     * @memberof SpanGroup
     */
    'callCount': number;
    /**
     * 该组span中，运行所处的应用实例列表。
     * @type {Array<string>}
     * @memberof SpanGroup
     */
    'innormalInstances': Array<string>;
    /**
     * 该组span中，所影响到的首服务异常列表。
     * @type {Array<string>}
     * @memberof SpanGroup
     */
    'innormalFirstServices': Array<string>;
}
/**
 * 
 * @export
 * @interface SpanGroupCondition
 */
export interface SpanGroupCondition {
    /**
     * 选择span的字段名称、操作符、字段值作为条件组合
     * @type {Array<FieldCondition>}
     * @memberof SpanGroupCondition
     */
    'fieldConditions'?: Array<FieldCondition>;
    /**
     * 
     * @type {TimeWindow}
     * @memberof SpanGroupCondition
     */
    'timeWindow': TimeWindow;
    /**
     * 时间颗粒度，单位是秒
     * @type {number}
     * @memberof SpanGroupCondition
     */
    'granularity': number;
    /**
     * 
     * @type {DurationRange}
     * @memberof SpanGroupCondition
     */
    'durationInterval': DurationRange;
    /**
     * 关联用户ID，用户登录任何机器都能看到历史条件
     * @type {string}
     * @memberof SpanGroupCondition
     */
    'userId': string;
    /**
     * 数据库编号
     * @type {string}
     * @memberof SpanGroupCondition
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface SpanGroupField
 */
export interface SpanGroupField {
    /**
     * 
     * @type {SpanAttributeType}
     * @memberof SpanGroupField
     */
    'type': SpanAttributeType;
    /**
     * 用于系统处理的属性名称，符合OTEL语义规范
     * @type {string}
     * @memberof SpanGroupField
     */
    'name': string;
}


/**
 * 
 * @export
 * @interface SpanGroupListResponse
 */
export interface SpanGroupListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof SpanGroupListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof SpanGroupListResponse
     */
    'message': string;
    /**
     * 分组
     * @type {Array<SpanGroup>}
     * @memberof SpanGroupListResponse
     */
    'groups': Array<SpanGroup>;
}
/**
 * Span的操作类型：CLIENT、SERVER、INTERNAL、PRODUCER、CONSUMER等。
 * @export
 * @enum {string}
 */

export const SpanKind = {
    CLIENT: 'SPAN_KIND_CLIENT',
    SERVER: 'SPAN_KIND_SERVER',
    INTERNAL: 'SPAN_KIND_INTERNAL',
    PRODUCER: 'SPAN_KIND_PRODUCER',
    CONSUMER: 'SPAN_KIND_CONSUMER'
} as const;

export type SpanKind = typeof SpanKind[keyof typeof SpanKind];


/**
 * 
 * @export
 * @interface SpanListResponse
 */
export interface SpanListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof SpanListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof SpanListResponse
     */
    'message': string;
    /**
     * 
     * @type {SpanPage}
     * @memberof SpanListResponse
     */
    'data'?: SpanPage;
}
/**
 * 
 * @export
 * @interface SpanPage
 */
export interface SpanPage {
    /**
     * 其实是请求参数的复制
     * @type {number}
     * @memberof SpanPage
     */
    'pageNo'?: number;
    /**
     * 其实是请求参数的复制
     * @type {number}
     * @memberof SpanPage
     */
    'pageSize'?: number;
    /**
     * 根据记录数计算结果
     * @type {number}
     * @memberof SpanPage
     */
    'pageCount'?: number;
    /**
     * 按条件查询结果的总记录数
     * @type {number}
     * @memberof SpanPage
     */
    'totalCount'?: number;
    /**
     * 查询结果列表
     * @type {Array<SpanBrief>}
     * @memberof SpanPage
     */
    'spans'?: Array<SpanBrief>;
}
/**
 * 
 * @export
 * @interface SpanSnapshotCondition
 */
export interface SpanSnapshotCondition {
    /**
     * span快照ID
     * @type {string}
     * @memberof SpanSnapshotCondition
     */
    'snapshotId': string;
    /**
     * 该快照对应的状态条件，是个数组
     * @type {Array<StatusCondition>}
     * @memberof SpanSnapshotCondition
     */
    'statusConditions'?: Array<StatusCondition>;
    /**
     * 
     * @type {TimeWindow}
     * @memberof SpanSnapshotCondition
     */
    'timeWindow'?: TimeWindow;
    /**
     * 
     * @type {DurationRange}
     * @memberof SpanSnapshotCondition
     */
    'durationInterval'?: DurationRange;
    /**
     * 用于建立子快照的字段条件数组，为空表示不限
     * @type {Array<FieldCondition>}
     * @memberof SpanSnapshotCondition
     */
    'fieldConditions'?: Array<FieldCondition>;
}
/**
 * 
 * @export
 * @interface SpanSnapshotConditionListResponse
 */
export interface SpanSnapshotConditionListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof SpanSnapshotConditionListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof SpanSnapshotConditionListResponse
     */
    'message': string;
    /**
     * 该快照
     * @type {Array<SpanSnapshotConditionResponse>}
     * @memberof SpanSnapshotConditionListResponse
     */
    'data': Array<SpanSnapshotConditionResponse>;
}
/**
 * 
 * @export
 * @interface SpanSnapshotConditionResponse
 */
export interface SpanSnapshotConditionResponse {
    /**
     * span快照ID
     * @type {string}
     * @memberof SpanSnapshotConditionResponse
     */
    'snapshotId': string;
    /**
     * 该快照对应的状态条件，是个数组
     * @type {Array<StatusCondition>}
     * @memberof SpanSnapshotConditionResponse
     */
    'statusConditions'?: Array<StatusCondition>;
    /**
     * 
     * @type {TimeWindow}
     * @memberof SpanSnapshotConditionResponse
     */
    'timeWindow'?: TimeWindow;
    /**
     * 
     * @type {DurationRange}
     * @memberof SpanSnapshotConditionResponse
     */
    'durationInterval'?: DurationRange;
    /**
     * 用于建立子快照的字段条件数组，为空表示不限
     * @type {Array<FieldConditionResponse>}
     * @memberof SpanSnapshotConditionResponse
     */
    'fieldConditions'?: Array<FieldConditionResponse>;
}
/**
 * 
 * @export
 * @interface SpanSnapshotResponse
 */
export interface SpanSnapshotResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof SpanSnapshotResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof SpanSnapshotResponse
     */
    'message': string;
    /**
     * 
     * @type {SpanSnapshotConditionResponse}
     * @memberof SpanSnapshotResponse
     */
    'data': SpanSnapshotConditionResponse;
}
/**
 * 1-成功；2-系统失败；3-业务失败
 * @export
 * @enum {string}
 */

export const SpanStatus = {
    /**
    * 成功
    */
    SUCCEED: 1,
    /**
    * 系统失败
    */
    SYS_FAULT: 2,
    /**
    * 业务失败
    */
    BIZ_FAULT: 3
} as const;

export type SpanStatus = typeof SpanStatus[keyof typeof SpanStatus];


/**
 * 
 * @export
 * @interface SpanSubSnapshotRequest
 */
export interface SpanSubSnapshotRequest {
    /**
     * 
     * @type {TimeWindow}
     * @memberof SpanSubSnapshotRequest
     */
    'timeWindow'?: TimeWindow;
    /**
     * 
     * @type {DurationRange}
     * @memberof SpanSubSnapshotRequest
     */
    'durationInterval'?: DurationRange;
    /**
     * 用于建立子快照的字段条件数组，为空表示不限
     * @type {Array<FieldCondition>}
     * @memberof SpanSubSnapshotRequest
     */
    'fieldConditions'?: Array<FieldCondition>;
}
/**
 * 
 * @export
 * @interface StatusCondition
 */
export interface StatusCondition {
    /**
     * 
     * @type {SpanStatus}
     * @memberof StatusCondition
     */
    'status': SpanStatus;
    /**
     * up-上升；down-下降；空表示不限。
     * @type {string}
     * @memberof StatusCondition
     */
    'trend'?: StatusConditionTrendEnum;
    /**
     * 单位毫秒，100毫秒~10000毫秒（10秒之间）
     * @type {number}
     * @memberof StatusCondition
     */
    'minDelay'?: number;
}

export const StatusConditionTrendEnum = {
    /**
    * 上升
    */
    UP: 'up',
    /**
    * 下降
    */
    DOWN: 'down'
} as const;

export type StatusConditionTrendEnum = typeof StatusConditionTrendEnum[keyof typeof StatusConditionTrendEnum];

/**
 * 
 * @export
 * @interface StringListResponse
 */
export interface StringListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof StringListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof StringListResponse
     */
    'message': string;
    /**
     * 字符串列表
     * @type {Array<string>}
     * @memberof StringListResponse
     */
    'data': Array<string>;
}
/**
 * 查询数据所限制的时间范围，可以是指定时间和最近时间两种方式。为空表示不限时间范围
 * @export
 * @interface TimeRange
 */
export interface TimeRange {
    /**
     * 
     * @type {TimeRangeType}
     * @memberof TimeRange
     */
    'timeType': TimeRangeType;
    /**
     * 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @type {number}
     * @memberof TimeRange
     */
    'fromTime'?: number;
    /**
     * 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @type {number}
     * @memberof TimeRange
     */
    'toTime'?: number;
    /**
     * timeType为1时，最近时间的秒数，整数
     * @type {number}
     * @memberof TimeRange
     */
    'recentSeconds'?: number;
}


/**
 * 表示哪种时间范围的类型：1-最近时间；2-指定时间段。为空表示不限时间范围
 * @export
 * @enum {string}
 */

export const TimeRangeType = {
    /**
    * 最近时间
    */
    RECENT: 1,
    /**
    * 按指定时间段
    */
    DESIGNATED: 2
} as const;

export type TimeRangeType = typeof TimeRangeType[keyof typeof TimeRangeType];


/**
 * 查询记录的时间范围
 * @export
 * @interface TimeWindow
 */
export interface TimeWindow {
    /**
     * 指定时间段情况下的起始时间戳，整数，单位毫秒
     * @type {number}
     * @memberof TimeWindow
     */
    'fromTime'?: number;
    /**
     * 指定时间段情况下的截止时间戳，整数，单位毫秒
     * @type {number}
     * @memberof TimeWindow
     */
    'toTime'?: number;
}
/**
 * 
 * @export
 * @interface TimelineSpan
 */
export interface TimelineSpan {
    /**
     * long类型的unix时间戳（从1970-1-1 00:00:00计算的毫秒数）
     * @type {number}
     * @memberof TimelineSpan
     */
    'timestamp': number;
    /**
     * 调用链ID
     * @type {string}
     * @memberof TimelineSpan
     */
    'traceId': string;
    /**
     * 某服务的调用跨度ID
     * @type {string}
     * @memberof TimelineSpan
     */
    'spanId': string;
    /**
     * 某服务的上级调用跨度ID
     * @type {string}
     * @memberof TimelineSpan
     */
    'parentSpanId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TimelineSpan
     */
    'serviceName': string;
    /**
     * 该Span所执行的操作名称，可能是RESTful PATH、java方法名、数据库操作命令等。
     * @type {string}
     * @memberof TimelineSpan
     */
    'spanName': string;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof TimelineSpan
     */
    'spanKind': NameDisplayPair;
    /**
     * 
     * @type {number}
     * @memberof TimelineSpan
     */
    'duration': number;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof TimelineSpan
     */
    'faultKind'?: NameDisplayPair;
    /**
     * 一般为包含异常类型的叶子Span
     * @type {boolean}
     * @memberof TimelineSpan
     */
    'isCause': boolean;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof TimelineSpan
     */
    'application': NameDisplayPair;
    /**
     * 
     * @type {NameDisplayPair}
     * @memberof TimelineSpan
     */
    'platform': NameDisplayPair;
    /**
     * 服务运行时跨度所在的集群
     * @type {string}
     * @memberof TimelineSpan
     */
    'cluster': string;
}
/**
 * 
 * @export
 * @interface TomcatStatus
 */
export interface TomcatStatus {
    /**
     * 
     * @type {number}
     * @memberof TomcatStatus
     */
    'threads': number;
    /**
     * 
     * @type {number}
     * @memberof TomcatStatus
     */
    'activeSessions': number;
    /**
     * 
     * @type {number}
     * @memberof TomcatStatus
     */
    'requestCount': number;
}
/**
 * 
 * @export
 * @interface TomcatStatusList
 */
export interface TomcatStatusList {
    /**
     * Unix时间戳
     * @type {number}
     * @memberof TomcatStatusList
     */
    'fromTime': number;
    /**
     * Unix时间戳
     * @type {number}
     * @memberof TomcatStatusList
     */
    'toTime': number;
    /**
     * 返回数据的时间颗粒度，单位秒
     * @type {number}
     * @memberof TomcatStatusList
     */
    'granularity': number;
    /**
     * 
     * @type {Array<TomcatStatus>}
     * @memberof TomcatStatusList
     */
    'values': Array<TomcatStatus>;
}
/**
 * 
 * @export
 * @interface TomcatStatusListResponse
 */
export interface TomcatStatusListResponse {
    /**
     * 
     * @type {number}
     * @memberof TomcatStatusListResponse
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof TomcatStatusListResponse
     */
    'message': string;
    /**
     * 
     * @type {TomcatStatusList}
     * @memberof TomcatStatusListResponse
     */
    'data': TomcatStatusList;
}
/**
 * 
 * @export
 * @interface TraceBrief
 */
export interface TraceBrief {
    /**
     * 
     * @type {string}
     * @memberof TraceBrief
     */
    'traceId': string;
    /**
     * TODO: 是否为枚举?
     * @type {string}
     * @memberof TraceBrief
     */
    'status': TraceBriefStatusEnum;
    /**
     * 客户端调用服务端的端点地址，可能是域名:端口，也可能是ip:port这种格式。
     * @type {string}
     * @memberof TraceBrief
     */
    'endpointAddress': string;
    /**
     * Trace root span开始时间，整数，Unix时间戳，单位毫秒
     * @type {number}
     * @memberof TraceBrief
     */
    'startTime': number;
    /**
     * 整个Trace的响应时延（其实是root span时延），单位毫秒
     * @type {number}
     * @memberof TraceBrief
     */
    'duration': number;
    /**
     * 
     * @type {number}
     * @memberof TraceBrief
     */
    'spanCount': number;
    /**
     * 该trace运行所在的平面，可能有多个（假设支持跨平面调用）
     * @type {Array<NameDisplayPair>}
     * @memberof TraceBrief
     */
    'platforms': Array<NameDisplayPair>;
    /**
     * 
     * @type {string}
     * @memberof TraceBrief
     */
    'appCluster': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TraceBrief
     */
    'instanceNames': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TraceBrief
     */
    'firstService': string;
    /**
     * 
     * @type {Array<NameDisplayPair>}
     * @memberof TraceBrief
     */
    'applications': Array<NameDisplayPair>;
}

export const TraceBriefStatusEnum = {
    Unknown: 'Unknown',
    BusinessFault: 'BusinessFault',
    SystemFault: 'SystemFault',
    Success: 'Success',
    Timeout: 'Timeout'
} as const;

export type TraceBriefStatusEnum = typeof TraceBriefStatusEnum[keyof typeof TraceBriefStatusEnum];

/**
 * 
 * @export
 * @interface TraceDetail
 */
export interface TraceDetail {
    /**
     * 
     * @type {TraceBrief}
     * @memberof TraceDetail
     */
    'brief': TraceBrief;
    /**
     * 该trace包含的所有span列表
     * @type {Array<TimelineSpan>}
     * @memberof TraceDetail
     */
    'spans': Array<TimelineSpan>;
}
/**
 * 
 * @export
 * @interface TraceDetailResponse
 */
export interface TraceDetailResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof TraceDetailResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof TraceDetailResponse
     */
    'message': string;
    /**
     * 
     * @type {TraceDetail}
     * @memberof TraceDetailResponse
     */
    'data': TraceDetail;
}
/**
 * 
 * @export
 * @interface TraceListResponse
 */
export interface TraceListResponse {
    /**
     * 如果请求响应码不为零，则表示出现业务错误。
     * @type {number}
     * @memberof TraceListResponse
     */
    'code': number;
    /**
     * 如果响应没有报错，则为“ok”
     * @type {string}
     * @memberof TraceListResponse
     */
    'message': string;
    /**
     * 
     * @type {TracePage}
     * @memberof TraceListResponse
     */
    'data': TracePage;
}
/**
 * 
 * @export
 * @interface TracePage
 */
export interface TracePage {
    /**
     * 
     * @type {number}
     * @memberof TracePage
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof TracePage
     */
    'pageSize': number;
    /**
     * 
     * @type {number}
     * @memberof TracePage
     */
    'pageNo': number;
    /**
     * 
     * @type {Array<TraceBrief>}
     * @memberof TracePage
     */
    'content': Array<TraceBrief>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 20240208，查询模板请求中，type改为枚举类型
         * @summary 创建查询模板
         * @param {QueryTemplateRequest} [queryTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryTemplate: async (queryTemplateRequest?: QueryTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/query-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据查询条件创建服务地图数据返回，供前端绘制服务地图。  20240208，修改服务地图响应数据结构，并将其包含的span快照功能放到“创建span快照”接口中去。 20240311, 删除参数中的instance节点
         * @summary 创建服务地图
         * @param {ServiceMapRequest} [serviceMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceMap: async (serviceMapRequest?: ServiceMapRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services-map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceMapRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
         * @summary 创建Span快照
         * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpanSnapshot: async (createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/span-snapshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSpanSnapshotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除搜索模板
         * @summary 删除查询模板
         * @param {string} templateId 传入参数为模板ID，根据模板ID获取搜索条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryTemplate: async (templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('deleteQueryTemplate', 'templateId', templateId)
            const localVarPath = `/query-templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取集群热点图
         * @param {string} snapshotId 
         * @param {number} [granularity] 统计数据的时间颗粒度，单位为秒，空则自动
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClusterHeatmap: async (snapshotId: string, granularity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getClusterHeatmap', 'snapshotId', snapshotId)
            const localVarPath = `/platforms/heatmap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (snapshotId !== undefined) {
                localVarQueryParameter['snapshotId'] = snapshotId;
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取应用集群RED数据
         * @param {string} platform 
         * @param {string} cluster 
         * @param {string} [instanceName] 统计应用集群下某个具体实例
         * @param {string} [serviceName] 
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClusterRed: async (platform: string, cluster: string, instanceName?: string, serviceName?: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('getClusterRed', 'platform', platform)
            // verify required parameter 'cluster' is not null or undefined
            assertParamExists('getClusterRed', 'cluster', cluster)
            const localVarPath = `/platforms/{platform}/app-clusters/{cluster}/red`
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)))
                .replace(`{${"cluster"}}`, encodeURIComponent(String(cluster)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (instanceName !== undefined) {
                localVarQueryParameter['instanceName'] = instanceName;
            }

            if (serviceName !== undefined) {
                localVarQueryParameter['serviceName'] = serviceName;
            }

            if (timeType !== undefined) {
                localVarQueryParameter['timeType'] = timeType;
            }

            if (fromTime !== undefined) {
                localVarQueryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['toTime'] = toTime;
            }

            if (recentSeconds !== undefined) {
                localVarQueryParameter['recentSeconds'] = recentSeconds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 这是前端界面查询字段查询条件时，提示有哪些操作符可用时使用的。
         * @summary 获取数据类型对应的操作符列表
         * @param {string} type 数据类型，N 或 S
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataTypeOperators: async (type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getDataTypeOperators', 'type', type)
            const localVarPath = `/parameters/data-type-operator/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 这是前端界面查询字段查询条件时，提示有哪些操作符可用时使用的。
         * @summary 获取数据类型对应的操作符列表
         * @param {string} type 数据类型，N 或 S
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataTypeOperators_1: async (type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getDataTypeOperators_1', 'type', type)
            const localVarPath = `/parameters/data-type-operator/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定span快照的应用实例资源列表。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断异常应用实例解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanAppInstances: async (spanSnapshotId: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('getSpanAppInstances', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/span-diagnosis/app-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据traceId和spanId查询其内包含的应用日志列表
         * @summary 查询span内应用日志
         * @param {string} traceId 要查询应用日志的traceId
         * @param {string} spanId 要查询应用日志的trace下spanId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanAppLogs: async (traceId: string, spanId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'traceId' is not null or undefined
            assertParamExists('getSpanAppLogs', 'traceId', traceId)
            // verify required parameter 'spanId' is not null or undefined
            assertParamExists('getSpanAppLogs', 'spanId', spanId)
            const localVarPath = `/traces/{traceId}/spans/{spanId}/app-logs`
                .replace(`{${"traceId"}}`, encodeURIComponent(String(traceId)))
                .replace(`{${"spanId"}}`, encodeURIComponent(String(spanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定span快照的自身时延趋势统计。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断时延趋势解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表进行self duration趋势分析。如果有多个快照，可以作为数组参数传入。
         * @param {Array<Percentile>} [percentiles] 需查询的统计比率
         * @param {Array<DurationType>} [durationTypes] 需查询的时延类型：1-自身时延，2-gap时延，3-Trace时延
         * @param {number} [granularity] 解析趋势的时间颗粒度，单位是秒，空表示自动。
         * @param {number} [fromTime] 计算时延趋势的起始时间，UNIX时间戳
         * @param {number} [toTime] 计算时延趋势的截止时间，UNIX时间戳
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanDurationTrends: async (spanSnapshotId: Array<string>, percentiles?: Array<Percentile>, durationTypes?: Array<DurationType>, granularity?: number, fromTime?: number, toTime?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('getSpanDurationTrends', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/span-diagnosis/duration-trend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }

            if (percentiles) {
                localVarQueryParameter['percentiles'] = percentiles;
            }

            if (durationTypes) {
                localVarQueryParameter['durationTypes'] = durationTypes;
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }

            if (fromTime !== undefined) {
                localVarQueryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['toTime'] = toTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据预先创建的span快照，对其进行报错解析。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断报错解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表中应用报错日志进行统计识别。如果有多个快照，可以作为数组参数传入。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanExceptionAnalysis: async (spanSnapshotId: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('getSpanExceptionAnalysis', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/span-diagnosis/exception-analysis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取tomcat状态趋势
         * @param {string} platform 
         * @param {string} cluster 
         * @param {string} [instanceName] 统计应用集群下某个具体实例
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {number} [granularity] 统计数据的时间颗粒度，单位为秒，空则自动
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTomcatStatus: async (platform: string, cluster: string, instanceName?: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, granularity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('getTomcatStatus', 'platform', platform)
            // verify required parameter 'cluster' is not null or undefined
            assertParamExists('getTomcatStatus', 'cluster', cluster)
            const localVarPath = `/platforms/{platform}/app-clusters/{cluster}/tomcat-status`
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)))
                .replace(`{${"cluster"}}`, encodeURIComponent(String(cluster)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (instanceName !== undefined) {
                localVarQueryParameter['instanceName'] = instanceName;
            }

            if (timeType !== undefined) {
                localVarQueryParameter['timeType'] = timeType;
            }

            if (fromTime !== undefined) {
                localVarQueryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['toTime'] = toTime;
            }

            if (recentSeconds !== undefined) {
                localVarQueryParameter['recentSeconds'] = recentSeconds;
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 初因span列表
         * @param {string} spanSnapshotId span快照ID
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceFaults: async (spanSnapshotId: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('getTraceFaults', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/span-diagnosis/trace-faults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId !== undefined) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据span快照ID、以及给定的分组条件字段（不可为空）生成分组后的多个快照ID。
         * @summary 将span快照按条件分组
         * @param {string} spanSnapshotId 用于进行span快照分组的span父快照ID
         * @param {Array<SpanGroupField> | null} [spanGroupField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupSpanSnapshots: async (spanSnapshotId: string, spanGroupField?: Array<SpanGroupField> | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('groupSpanSnapshots', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/span-snapshots/{spanSnapshotId}/groups`
                .replace(`{${"spanSnapshotId"}}`, encodeURIComponent(String(spanSnapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spanGroupField, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 识别指定span快照下所有span五类属性（基本信息、spanAttribuites、resourceAttribuites、requestAttribuites、responseAttribuites)的最大N的共有属性（N是可配置参数，由max_commonality_count指定，默认为6）  20240208，根据新的产品设计新增该接口。
         * @summary 获取span共性识别结果
         * @param {string} snapshotId 用于进行共性分析的span快照ID
         * @param {number} [limit] 用来获取共有属性的个数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifySpanCommonalities: async (snapshotId: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('identifySpanCommonalities', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/commonalities`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定平面下的应用集群列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造
         * @summary 获取平面下应用集群列表
         * @param {string} platform 平面编码名称（非显示名称）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppClusters: async (platform: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('listAppClusters', 'platform', platform)
            const localVarPath = `/platforms/{platform}/app-clusters`
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定平面、指定应用集群下、并在时间段范围内有效的应用实例列表，包含名称和显示名称。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
         * @summary 获取集群下应用实例列表
         * @param {string} platform 望京平面
         * @param {string} cluster 营业厅接入的订单中心
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppInstances: async (platform: string, cluster: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('listAppInstances', 'platform', platform)
            // verify required parameter 'cluster' is not null or undefined
            assertParamExists('listAppInstances', 'cluster', cluster)
            const localVarPath = `/platforms/{platform}/app-clusters/{cluster}/app-instances`
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)))
                .replace(`{${"cluster"}}`, encodeURIComponent(String(cluster)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (timeType !== undefined) {
                localVarQueryParameter['timeType'] = timeType;
            }

            if (fromTime !== undefined) {
                localVarQueryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['toTime'] = toTime;
            }

            if (recentSeconds !== undefined) {
                localVarQueryParameter['recentSeconds'] = recentSeconds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据log快照ID查询出该log快照中的所有log信息列表，用分页表示  20240208，根据新产品原型，新增该接口  20240222，根据讨论结果，改为使用通用查询条件查询
         * @summary 查询Log列表
         * @param {number} [pageNo] 当前页号
         * @param {number} [pageSize] 每页记录数
         * @param {QueryConditions} [queryConditions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppLogs: async (pageNo?: number, pageSize?: number, queryConditions?: QueryConditions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/app-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryConditions, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件key列表
         * @param {number} type 1-span条件；2-log条件；3-metrics条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionKeys: async (type: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listConditionKeys', 'type', type)
            const localVarPath = `/condition-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件key列表
         * @param {number} type 1-span条件；2-log条件；3-metrics条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionKeys_2: async (type: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listConditionKeys_2', 'type', type)
            const localVarPath = `/condition-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件某key取值列表
         * @param {number} keyId 查询条件key的主键ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionValues: async (keyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyId' is not null or undefined
            assertParamExists('listConditionValues', 'keyId', keyId)
            const localVarPath = `/condition-keys/{keyId}/values`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件某key取值列表
         * @param {number} keyId 查询条件key的主键ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionValues_3: async (keyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyId' is not null or undefined
            assertParamExists('listConditionValues_3', 'keyId', keyId)
            const localVarPath = `/condition-keys/{keyId}/values`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获得系统当前的所有数据中心平面列表  获取指定平面下的应用集群列表，包含名称和显示名称。  20240208，按照RESTful规范新增该接口。
         * @summary 获得平面列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlatforms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/platforms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取查询模板列表
         * @param {number} [type] 1-Trace异常搜索模板；2-日志异常搜索模板；
         * @param {number} [limit] 获取该用户的查询模板记录数，默认情况下服务器最多返回10条
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryTemplates: async (type?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/query-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定平面、指定应用集群下、并在时间段范围内有效的软件实例列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
         * @summary 获取集群下软件实例列表
         * @param {string} platform 望京平面
         * @param {string} software 软件服务在k8s中的deployment名称
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoftwareInstances: async (platform: string, software: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('listSoftwareInstances', 'platform', platform)
            // verify required parameter 'software' is not null or undefined
            assertParamExists('listSoftwareInstances', 'software', software)
            const localVarPath = `/platforms/{platform}/softwares/{software}/instances`
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)))
                .replace(`{${"software"}}`, encodeURIComponent(String(software)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (timeType !== undefined) {
                localVarQueryParameter['timeType'] = timeType;
            }

            if (fromTime !== undefined) {
                localVarQueryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['toTime'] = toTime;
            }

            if (recentSeconds !== undefined) {
                localVarQueryParameter['recentSeconds'] = recentSeconds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询所有软件列表，用于显示软件logo等
         * @summary 查询软件列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoftwares: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/softwares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应使用/spans
         * @summary 按条件查询Span
         * @param {Array<string>} spanSnapshotId span快照ID，如果有多个快照则用数组给出
         * @param {string} [conditions] 在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。
         * @param {number} [pageNo] 查询指定的页号
         * @param {number} [pageSize] 对于每个异常下的报错span，每页显示多少条记录，如果不填写则默认10.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        querySpanBySnapshots: async (spanSnapshotId: Array<string>, conditions?: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('querySpanBySnapshots', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/spans-by-snapshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }

            if (conditions !== undefined) {
                localVarQueryParameter['conditions'] = conditions;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 20240208，更新查询模板时，可能也会更新模板名称，所以改为使用查询模板请求作为输入。
         * @summary 更新搜索模板
         * @param {string} templateId 传入参数为模板ID，根据模板ID获取搜索条件
         * @param {QueryTemplateRequest} [queryTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryTemplate: async (templateId: string, queryTemplateRequest?: QueryTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('updateQueryTemplate', 'templateId', templateId)
            const localVarPath = `/query-templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 20240208，查询模板请求中，type改为枚举类型
         * @summary 创建查询模板
         * @param {QueryTemplateRequest} [queryTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQueryTemplate(queryTemplateRequest?: QueryTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQueryTemplate(queryTemplateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.createQueryTemplate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据查询条件创建服务地图数据返回，供前端绘制服务地图。  20240208，修改服务地图响应数据结构，并将其包含的span快照功能放到“创建span快照”接口中去。 20240311, 删除参数中的instance节点
         * @summary 创建服务地图
         * @param {ServiceMapRequest} [serviceMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceMap(serviceMapRequest?: ServiceMapRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceMapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceMap(serviceMapRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.createServiceMap']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
         * @summary 创建Span快照
         * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSpanSnapshot(createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSpanSnapshot(createSpanSnapshotRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.createSpanSnapshot']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 删除搜索模板
         * @summary 删除查询模板
         * @param {string} templateId 传入参数为模板ID，根据模板ID获取搜索条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQueryTemplate(templateId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQueryTemplate(templateId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteQueryTemplate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 获取集群热点图
         * @param {string} snapshotId 
         * @param {number} [granularity] 统计数据的时间颗粒度，单位为秒，空则自动
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClusterHeatmap(snapshotId: string, granularity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeatmapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClusterHeatmap(snapshotId, granularity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getClusterHeatmap']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 获取应用集群RED数据
         * @param {string} platform 
         * @param {string} cluster 
         * @param {string} [instanceName] 统计应用集群下某个具体实例
         * @param {string} [serviceName] 
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClusterRed(platform: string, cluster: string, instanceName?: string, serviceName?: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceRedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClusterRed(platform, cluster, instanceName, serviceName, timeType, fromTime, toTime, recentSeconds, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getClusterRed']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 这是前端界面查询字段查询条件时，提示有哪些操作符可用时使用的。
         * @summary 获取数据类型对应的操作符列表
         * @param {string} type 数据类型，N 或 S
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataTypeOperators(type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NameDisplayListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataTypeOperators(type, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getDataTypeOperators']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 这是前端界面查询字段查询条件时，提示有哪些操作符可用时使用的。
         * @summary 获取数据类型对应的操作符列表
         * @param {string} type 数据类型，N 或 S
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataTypeOperators_1(type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NameDisplayListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataTypeOperators_1(type, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getDataTypeOperators_1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定span快照的应用实例资源列表。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断异常应用实例解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanAppInstances(spanSnapshotId: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitialCauseAppInstanceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanAppInstances(spanSnapshotId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getSpanAppInstances']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据traceId和spanId查询其内包含的应用日志列表
         * @summary 查询span内应用日志
         * @param {string} traceId 要查询应用日志的traceId
         * @param {string} spanId 要查询应用日志的trace下spanId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanAppLogs(traceId: string, spanId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppLogDetailListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanAppLogs(traceId, spanId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getSpanAppLogs']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定span快照的自身时延趋势统计。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断时延趋势解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表进行self duration趋势分析。如果有多个快照，可以作为数组参数传入。
         * @param {Array<Percentile>} [percentiles] 需查询的统计比率
         * @param {Array<DurationType>} [durationTypes] 需查询的时延类型：1-自身时延，2-gap时延，3-Trace时延
         * @param {number} [granularity] 解析趋势的时间颗粒度，单位是秒，空表示自动。
         * @param {number} [fromTime] 计算时延趋势的起始时间，UNIX时间戳
         * @param {number} [toTime] 计算时延趋势的截止时间，UNIX时间戳
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanDurationTrends(spanSnapshotId: Array<string>, percentiles?: Array<Percentile>, durationTypes?: Array<DurationType>, granularity?: number, fromTime?: number, toTime?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DurationTrendResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanDurationTrends(spanSnapshotId, percentiles, durationTypes, granularity, fromTime, toTime, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getSpanDurationTrends']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据预先创建的span快照，对其进行报错解析。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断报错解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表中应用报错日志进行统计识别。如果有多个快照，可以作为数组参数传入。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanExceptionAnalysis(spanSnapshotId: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceErrorDiagnosisResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanExceptionAnalysis(spanSnapshotId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getSpanExceptionAnalysis']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 获取tomcat状态趋势
         * @param {string} platform 
         * @param {string} cluster 
         * @param {string} [instanceName] 统计应用集群下某个具体实例
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {number} [granularity] 统计数据的时间颗粒度，单位为秒，空则自动
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTomcatStatus(platform: string, cluster: string, instanceName?: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, granularity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TomcatStatusListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTomcatStatus(platform, cluster, instanceName, timeType, fromTime, toTime, recentSeconds, granularity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getTomcatStatus']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 初因span列表
         * @param {string} spanSnapshotId span快照ID
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTraceFaults(spanSnapshotId: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitialCauseSpanListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTraceFaults(spanSnapshotId, pageNo, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getTraceFaults']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据span快照ID、以及给定的分组条件字段（不可为空）生成分组后的多个快照ID。
         * @summary 将span快照按条件分组
         * @param {string} spanSnapshotId 用于进行span快照分组的span父快照ID
         * @param {Array<SpanGroupField> | null} [spanGroupField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupSpanSnapshots(spanSnapshotId: string, spanGroupField?: Array<SpanGroupField> | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpanGroupListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupSpanSnapshots(spanSnapshotId, spanGroupField, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.groupSpanSnapshots']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 识别指定span快照下所有span五类属性（基本信息、spanAttribuites、resourceAttribuites、requestAttribuites、responseAttribuites)的最大N的共有属性（N是可配置参数，由max_commonality_count指定，默认为6）  20240208，根据新的产品设计新增该接口。
         * @summary 获取span共性识别结果
         * @param {string} snapshotId 用于进行共性分析的span快照ID
         * @param {number} [limit] 用来获取共有属性的个数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identifySpanCommonalities(snapshotId: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpanCommonalityListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identifySpanCommonalities(snapshotId, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.identifySpanCommonalities']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定平面下的应用集群列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造
         * @summary 获取平面下应用集群列表
         * @param {string} platform 平面编码名称（非显示名称）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppClusters(platform: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NameDisplayListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAppClusters(platform, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listAppClusters']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定平面、指定应用集群下、并在时间段范围内有效的应用实例列表，包含名称和显示名称。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
         * @summary 获取集群下应用实例列表
         * @param {string} platform 望京平面
         * @param {string} cluster 营业厅接入的订单中心
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppInstances(platform: string, cluster: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAppInstances(platform, cluster, timeType, fromTime, toTime, recentSeconds, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listAppInstances']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据log快照ID查询出该log快照中的所有log信息列表，用分页表示  20240208，根据新产品原型，新增该接口  20240222，根据讨论结果，改为使用通用查询条件查询
         * @summary 查询Log列表
         * @param {number} [pageNo] 当前页号
         * @param {number} [pageSize] 每页记录数
         * @param {QueryConditions} [queryConditions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppLogs(pageNo?: number, pageSize?: number, queryConditions?: QueryConditions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppLogListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAppLogs(pageNo, pageSize, queryConditions, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listAppLogs']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件key列表
         * @param {number} type 1-span条件；2-log条件；3-metrics条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConditionKeys(type: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConditionKeyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConditionKeys(type, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listConditionKeys']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件key列表
         * @param {number} type 1-span条件；2-log条件；3-metrics条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConditionKeys_2(type: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConditionKeyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConditionKeys_2(type, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listConditionKeys_2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件某key取值列表
         * @param {number} keyId 查询条件key的主键ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConditionValues(keyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConditionValues(keyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listConditionValues']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件某key取值列表
         * @param {number} keyId 查询条件key的主键ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConditionValues_3(keyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConditionValues_3(keyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listConditionValues_3']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获得系统当前的所有数据中心平面列表  获取指定平面下的应用集群列表，包含名称和显示名称。  20240208，按照RESTful规范新增该接口。
         * @summary 获得平面列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPlatforms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NameDisplayListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPlatforms(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listPlatforms']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 获取查询模板列表
         * @param {number} [type] 1-Trace异常搜索模板；2-日志异常搜索模板；
         * @param {number} [limit] 获取该用户的查询模板记录数，默认情况下服务器最多返回10条
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listQueryTemplates(type?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryTemplateListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listQueryTemplates(type, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listQueryTemplates']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定平面、指定应用集群下、并在时间段范围内有效的软件实例列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
         * @summary 获取集群下软件实例列表
         * @param {string} platform 望京平面
         * @param {string} software 软件服务在k8s中的deployment名称
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSoftwareInstances(platform: string, software: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSoftwareInstances(platform, software, timeType, fromTime, toTime, recentSeconds, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listSoftwareInstances']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 查询所有软件列表，用于显示软件logo等
         * @summary 查询软件列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSoftwares(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SoftwareListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSoftwares(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.listSoftwares']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 应使用/spans
         * @summary 按条件查询Span
         * @param {Array<string>} spanSnapshotId span快照ID，如果有多个快照则用数组给出
         * @param {string} [conditions] 在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。
         * @param {number} [pageNo] 查询指定的页号
         * @param {number} [pageSize] 对于每个异常下的报错span，每页显示多少条记录，如果不填写则默认10.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async querySpanBySnapshots(spanSnapshotId: Array<string>, conditions?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpanListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.querySpanBySnapshots(spanSnapshotId, conditions, pageNo, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.querySpanBySnapshots']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 20240208，更新查询模板时，可能也会更新模板名称，所以改为使用查询模板请求作为输入。
         * @summary 更新搜索模板
         * @param {string} templateId 传入参数为模板ID，根据模板ID获取搜索条件
         * @param {QueryTemplateRequest} [queryTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQueryTemplate(templateId: string, queryTemplateRequest?: QueryTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQueryTemplate(templateId, queryTemplateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.updateQueryTemplate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 20240208，查询模板请求中，type改为枚举类型
         * @summary 创建查询模板
         * @param {QueryTemplateRequest} [queryTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryTemplate(queryTemplateRequest?: QueryTemplateRequest, options?: any): AxiosPromise<QueryTemplateResponse> {
            return localVarFp.createQueryTemplate(queryTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据查询条件创建服务地图数据返回，供前端绘制服务地图。  20240208，修改服务地图响应数据结构，并将其包含的span快照功能放到“创建span快照”接口中去。 20240311, 删除参数中的instance节点
         * @summary 创建服务地图
         * @param {ServiceMapRequest} [serviceMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceMap(serviceMapRequest?: ServiceMapRequest, options?: any): AxiosPromise<ServiceMapResponse> {
            return localVarFp.createServiceMap(serviceMapRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
         * @summary 创建Span快照
         * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpanSnapshot(createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.createSpanSnapshot(createSpanSnapshotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除搜索模板
         * @summary 删除查询模板
         * @param {string} templateId 传入参数为模板ID，根据模板ID获取搜索条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryTemplate(templateId: string, options?: any): AxiosPromise<CommonResponse> {
            return localVarFp.deleteQueryTemplate(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取集群热点图
         * @param {string} snapshotId 
         * @param {number} [granularity] 统计数据的时间颗粒度，单位为秒，空则自动
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClusterHeatmap(snapshotId: string, granularity?: number, options?: any): AxiosPromise<HeatmapResponse> {
            return localVarFp.getClusterHeatmap(snapshotId, granularity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取应用集群RED数据
         * @param {string} platform 
         * @param {string} cluster 
         * @param {string} [instanceName] 统计应用集群下某个具体实例
         * @param {string} [serviceName] 
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClusterRed(platform: string, cluster: string, instanceName?: string, serviceName?: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: any): AxiosPromise<InstanceRedResponse> {
            return localVarFp.getClusterRed(platform, cluster, instanceName, serviceName, timeType, fromTime, toTime, recentSeconds, options).then((request) => request(axios, basePath));
        },
        /**
         * 这是前端界面查询字段查询条件时，提示有哪些操作符可用时使用的。
         * @summary 获取数据类型对应的操作符列表
         * @param {string} type 数据类型，N 或 S
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataTypeOperators(type: string, options?: any): AxiosPromise<NameDisplayListResponse> {
            return localVarFp.getDataTypeOperators(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 这是前端界面查询字段查询条件时，提示有哪些操作符可用时使用的。
         * @summary 获取数据类型对应的操作符列表
         * @param {string} type 数据类型，N 或 S
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataTypeOperators_1(type: string, options?: any): AxiosPromise<NameDisplayListResponse> {
            return localVarFp.getDataTypeOperators_1(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定span快照的应用实例资源列表。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断异常应用实例解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanAppInstances(spanSnapshotId: Array<string>, options?: any): AxiosPromise<InitialCauseAppInstanceListResponse> {
            return localVarFp.getSpanAppInstances(spanSnapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据traceId和spanId查询其内包含的应用日志列表
         * @summary 查询span内应用日志
         * @param {string} traceId 要查询应用日志的traceId
         * @param {string} spanId 要查询应用日志的trace下spanId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanAppLogs(traceId: string, spanId: string, options?: any): AxiosPromise<AppLogDetailListResponse> {
            return localVarFp.getSpanAppLogs(traceId, spanId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定span快照的自身时延趋势统计。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断时延趋势解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表进行self duration趋势分析。如果有多个快照，可以作为数组参数传入。
         * @param {Array<Percentile>} [percentiles] 需查询的统计比率
         * @param {Array<DurationType>} [durationTypes] 需查询的时延类型：1-自身时延，2-gap时延，3-Trace时延
         * @param {number} [granularity] 解析趋势的时间颗粒度，单位是秒，空表示自动。
         * @param {number} [fromTime] 计算时延趋势的起始时间，UNIX时间戳
         * @param {number} [toTime] 计算时延趋势的截止时间，UNIX时间戳
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanDurationTrends(spanSnapshotId: Array<string>, percentiles?: Array<Percentile>, durationTypes?: Array<DurationType>, granularity?: number, fromTime?: number, toTime?: number, options?: any): AxiosPromise<DurationTrendResponse> {
            return localVarFp.getSpanDurationTrends(spanSnapshotId, percentiles, durationTypes, granularity, fromTime, toTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据预先创建的span快照，对其进行报错解析。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断报错解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表中应用报错日志进行统计识别。如果有多个快照，可以作为数组参数传入。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanExceptionAnalysis(spanSnapshotId: Array<string>, options?: any): AxiosPromise<ServiceErrorDiagnosisResponse> {
            return localVarFp.getSpanExceptionAnalysis(spanSnapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取tomcat状态趋势
         * @param {string} platform 
         * @param {string} cluster 
         * @param {string} [instanceName] 统计应用集群下某个具体实例
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {number} [granularity] 统计数据的时间颗粒度，单位为秒，空则自动
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTomcatStatus(platform: string, cluster: string, instanceName?: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, granularity?: number, options?: any): AxiosPromise<TomcatStatusListResponse> {
            return localVarFp.getTomcatStatus(platform, cluster, instanceName, timeType, fromTime, toTime, recentSeconds, granularity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 初因span列表
         * @param {string} spanSnapshotId span快照ID
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceFaults(spanSnapshotId: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<InitialCauseSpanListResponse> {
            return localVarFp.getTraceFaults(spanSnapshotId, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据span快照ID、以及给定的分组条件字段（不可为空）生成分组后的多个快照ID。
         * @summary 将span快照按条件分组
         * @param {string} spanSnapshotId 用于进行span快照分组的span父快照ID
         * @param {Array<SpanGroupField> | null} [spanGroupField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupSpanSnapshots(spanSnapshotId: string, spanGroupField?: Array<SpanGroupField> | null, options?: any): AxiosPromise<SpanGroupListResponse> {
            return localVarFp.groupSpanSnapshots(spanSnapshotId, spanGroupField, options).then((request) => request(axios, basePath));
        },
        /**
         * 识别指定span快照下所有span五类属性（基本信息、spanAttribuites、resourceAttribuites、requestAttribuites、responseAttribuites)的最大N的共有属性（N是可配置参数，由max_commonality_count指定，默认为6）  20240208，根据新的产品设计新增该接口。
         * @summary 获取span共性识别结果
         * @param {string} snapshotId 用于进行共性分析的span快照ID
         * @param {number} [limit] 用来获取共有属性的个数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifySpanCommonalities(snapshotId: string, limit?: number, options?: any): AxiosPromise<SpanCommonalityListResponse> {
            return localVarFp.identifySpanCommonalities(snapshotId, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定平面下的应用集群列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造
         * @summary 获取平面下应用集群列表
         * @param {string} platform 平面编码名称（非显示名称）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppClusters(platform: string, options?: any): AxiosPromise<NameDisplayListResponse> {
            return localVarFp.listAppClusters(platform, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定平面、指定应用集群下、并在时间段范围内有效的应用实例列表，包含名称和显示名称。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
         * @summary 获取集群下应用实例列表
         * @param {string} platform 望京平面
         * @param {string} cluster 营业厅接入的订单中心
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppInstances(platform: string, cluster: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: any): AxiosPromise<InstanceListResponse> {
            return localVarFp.listAppInstances(platform, cluster, timeType, fromTime, toTime, recentSeconds, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据log快照ID查询出该log快照中的所有log信息列表，用分页表示  20240208，根据新产品原型，新增该接口  20240222，根据讨论结果，改为使用通用查询条件查询
         * @summary 查询Log列表
         * @param {number} [pageNo] 当前页号
         * @param {number} [pageSize] 每页记录数
         * @param {QueryConditions} [queryConditions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppLogs(pageNo?: number, pageSize?: number, queryConditions?: QueryConditions, options?: any): AxiosPromise<AppLogListResponse> {
            return localVarFp.listAppLogs(pageNo, pageSize, queryConditions, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件key列表
         * @param {number} type 1-span条件；2-log条件；3-metrics条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionKeys(type: number, options?: any): AxiosPromise<ConditionKeyListResponse> {
            return localVarFp.listConditionKeys(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件key列表
         * @param {number} type 1-span条件；2-log条件；3-metrics条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionKeys_2(type: number, options?: any): AxiosPromise<ConditionKeyListResponse> {
            return localVarFp.listConditionKeys_2(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件某key取值列表
         * @param {number} keyId 查询条件key的主键ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionValues(keyId: number, options?: any): AxiosPromise<StringListResponse> {
            return localVarFp.listConditionValues(keyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件某key取值列表
         * @param {number} keyId 查询条件key的主键ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionValues_3(keyId: number, options?: any): AxiosPromise<StringListResponse> {
            return localVarFp.listConditionValues_3(keyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获得系统当前的所有数据中心平面列表  获取指定平面下的应用集群列表，包含名称和显示名称。  20240208，按照RESTful规范新增该接口。
         * @summary 获得平面列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlatforms(options?: any): AxiosPromise<NameDisplayListResponse> {
            return localVarFp.listPlatforms(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取查询模板列表
         * @param {number} [type] 1-Trace异常搜索模板；2-日志异常搜索模板；
         * @param {number} [limit] 获取该用户的查询模板记录数，默认情况下服务器最多返回10条
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryTemplates(type?: number, limit?: number, options?: any): AxiosPromise<QueryTemplateListResponse> {
            return localVarFp.listQueryTemplates(type, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定平面、指定应用集群下、并在时间段范围内有效的软件实例列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
         * @summary 获取集群下软件实例列表
         * @param {string} platform 望京平面
         * @param {string} software 软件服务在k8s中的deployment名称
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoftwareInstances(platform: string, software: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: any): AxiosPromise<InstanceListResponse> {
            return localVarFp.listSoftwareInstances(platform, software, timeType, fromTime, toTime, recentSeconds, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询所有软件列表，用于显示软件logo等
         * @summary 查询软件列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoftwares(options?: any): AxiosPromise<SoftwareListResponse> {
            return localVarFp.listSoftwares(options).then((request) => request(axios, basePath));
        },
        /**
         * 应使用/spans
         * @summary 按条件查询Span
         * @param {Array<string>} spanSnapshotId span快照ID，如果有多个快照则用数组给出
         * @param {string} [conditions] 在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。
         * @param {number} [pageNo] 查询指定的页号
         * @param {number} [pageSize] 对于每个异常下的报错span，每页显示多少条记录，如果不填写则默认10.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        querySpanBySnapshots(spanSnapshotId: Array<string>, conditions?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<SpanListResponse> {
            return localVarFp.querySpanBySnapshots(spanSnapshotId, conditions, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 20240208，更新查询模板时，可能也会更新模板名称，所以改为使用查询模板请求作为输入。
         * @summary 更新搜索模板
         * @param {string} templateId 传入参数为模板ID，根据模板ID获取搜索条件
         * @param {QueryTemplateRequest} [queryTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryTemplate(templateId: string, queryTemplateRequest?: QueryTemplateRequest, options?: any): AxiosPromise<QueryTemplateResponse> {
            return localVarFp.updateQueryTemplate(templateId, queryTemplateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 20240208，查询模板请求中，type改为枚举类型
     * @summary 创建查询模板
     * @param {QueryTemplateRequest} [queryTemplateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createQueryTemplate(queryTemplateRequest?: QueryTemplateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createQueryTemplate(queryTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据查询条件创建服务地图数据返回，供前端绘制服务地图。  20240208，修改服务地图响应数据结构，并将其包含的span快照功能放到“创建span快照”接口中去。 20240311, 删除参数中的instance节点
     * @summary 创建服务地图
     * @param {ServiceMapRequest} [serviceMapRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createServiceMap(serviceMapRequest?: ServiceMapRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createServiceMap(serviceMapRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
     * @summary 创建Span快照
     * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSpanSnapshot(createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSpanSnapshot(createSpanSnapshotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除搜索模板
     * @summary 删除查询模板
     * @param {string} templateId 传入参数为模板ID，根据模板ID获取搜索条件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQueryTemplate(templateId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteQueryTemplate(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取集群热点图
     * @param {string} snapshotId 
     * @param {number} [granularity] 统计数据的时间颗粒度，单位为秒，空则自动
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClusterHeatmap(snapshotId: string, granularity?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getClusterHeatmap(snapshotId, granularity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取应用集群RED数据
     * @param {string} platform 
     * @param {string} cluster 
     * @param {string} [instanceName] 统计应用集群下某个具体实例
     * @param {string} [serviceName] 
     * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
     * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClusterRed(platform: string, cluster: string, instanceName?: string, serviceName?: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getClusterRed(platform, cluster, instanceName, serviceName, timeType, fromTime, toTime, recentSeconds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 这是前端界面查询字段查询条件时，提示有哪些操作符可用时使用的。
     * @summary 获取数据类型对应的操作符列表
     * @param {string} type 数据类型，N 或 S
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDataTypeOperators(type: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDataTypeOperators(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 这是前端界面查询字段查询条件时，提示有哪些操作符可用时使用的。
     * @summary 获取数据类型对应的操作符列表
     * @param {string} type 数据类型，N 或 S
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDataTypeOperators_1(type: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDataTypeOperators_1(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定span快照的应用实例资源列表。  20240208，根据新的产品设计设计该接口。
     * @summary span诊断异常应用实例解析
     * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSpanAppInstances(spanSnapshotId: Array<string>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSpanAppInstances(spanSnapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据traceId和spanId查询其内包含的应用日志列表
     * @summary 查询span内应用日志
     * @param {string} traceId 要查询应用日志的traceId
     * @param {string} spanId 要查询应用日志的trace下spanId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSpanAppLogs(traceId: string, spanId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSpanAppLogs(traceId, spanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定span快照的自身时延趋势统计。  20240208，根据新的产品设计设计该接口。
     * @summary span诊断时延趋势解析
     * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表进行self duration趋势分析。如果有多个快照，可以作为数组参数传入。
     * @param {Array<Percentile>} [percentiles] 需查询的统计比率
     * @param {Array<DurationType>} [durationTypes] 需查询的时延类型：1-自身时延，2-gap时延，3-Trace时延
     * @param {number} [granularity] 解析趋势的时间颗粒度，单位是秒，空表示自动。
     * @param {number} [fromTime] 计算时延趋势的起始时间，UNIX时间戳
     * @param {number} [toTime] 计算时延趋势的截止时间，UNIX时间戳
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSpanDurationTrends(spanSnapshotId: Array<string>, percentiles?: Array<Percentile>, durationTypes?: Array<DurationType>, granularity?: number, fromTime?: number, toTime?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSpanDurationTrends(spanSnapshotId, percentiles, durationTypes, granularity, fromTime, toTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据预先创建的span快照，对其进行报错解析。  20240208，根据新的产品设计设计该接口。
     * @summary span诊断报错解析
     * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表中应用报错日志进行统计识别。如果有多个快照，可以作为数组参数传入。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSpanExceptionAnalysis(spanSnapshotId: Array<string>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSpanExceptionAnalysis(spanSnapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取tomcat状态趋势
     * @param {string} platform 
     * @param {string} cluster 
     * @param {string} [instanceName] 统计应用集群下某个具体实例
     * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
     * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
     * @param {number} [granularity] 统计数据的时间颗粒度，单位为秒，空则自动
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTomcatStatus(platform: string, cluster: string, instanceName?: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, granularity?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTomcatStatus(platform, cluster, instanceName, timeType, fromTime, toTime, recentSeconds, granularity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 初因span列表
     * @param {string} spanSnapshotId span快照ID
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTraceFaults(spanSnapshotId: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTraceFaults(spanSnapshotId, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据span快照ID、以及给定的分组条件字段（不可为空）生成分组后的多个快照ID。
     * @summary 将span快照按条件分组
     * @param {string} spanSnapshotId 用于进行span快照分组的span父快照ID
     * @param {Array<SpanGroupField> | null} [spanGroupField] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupSpanSnapshots(spanSnapshotId: string, spanGroupField?: Array<SpanGroupField> | null, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).groupSpanSnapshots(spanSnapshotId, spanGroupField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 识别指定span快照下所有span五类属性（基本信息、spanAttribuites、resourceAttribuites、requestAttribuites、responseAttribuites)的最大N的共有属性（N是可配置参数，由max_commonality_count指定，默认为6）  20240208，根据新的产品设计新增该接口。
     * @summary 获取span共性识别结果
     * @param {string} snapshotId 用于进行共性分析的span快照ID
     * @param {number} [limit] 用来获取共有属性的个数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public identifySpanCommonalities(snapshotId: string, limit?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).identifySpanCommonalities(snapshotId, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定平面下的应用集群列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造
     * @summary 获取平面下应用集群列表
     * @param {string} platform 平面编码名称（非显示名称）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAppClusters(platform: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listAppClusters(platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定平面、指定应用集群下、并在时间段范围内有效的应用实例列表，包含名称和显示名称。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
     * @summary 获取集群下应用实例列表
     * @param {string} platform 望京平面
     * @param {string} cluster 营业厅接入的订单中心
     * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
     * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAppInstances(platform: string, cluster: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listAppInstances(platform, cluster, timeType, fromTime, toTime, recentSeconds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据log快照ID查询出该log快照中的所有log信息列表，用分页表示  20240208，根据新产品原型，新增该接口  20240222，根据讨论结果，改为使用通用查询条件查询
     * @summary 查询Log列表
     * @param {number} [pageNo] 当前页号
     * @param {number} [pageSize] 每页记录数
     * @param {QueryConditions} [queryConditions] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAppLogs(pageNo?: number, pageSize?: number, queryConditions?: QueryConditions, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listAppLogs(pageNo, pageSize, queryConditions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
     * @summary 查询条件key列表
     * @param {number} type 1-span条件；2-log条件；3-metrics条件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listConditionKeys(type: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listConditionKeys(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
     * @summary 查询条件key列表
     * @param {number} type 1-span条件；2-log条件；3-metrics条件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listConditionKeys_2(type: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listConditionKeys_2(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
     * @summary 查询条件某key取值列表
     * @param {number} keyId 查询条件key的主键ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listConditionValues(keyId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listConditionValues(keyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
     * @summary 查询条件某key取值列表
     * @param {number} keyId 查询条件key的主键ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listConditionValues_3(keyId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listConditionValues_3(keyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获得系统当前的所有数据中心平面列表  获取指定平面下的应用集群列表，包含名称和显示名称。  20240208，按照RESTful规范新增该接口。
     * @summary 获得平面列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPlatforms(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPlatforms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取查询模板列表
     * @param {number} [type] 1-Trace异常搜索模板；2-日志异常搜索模板；
     * @param {number} [limit] 获取该用户的查询模板记录数，默认情况下服务器最多返回10条
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listQueryTemplates(type?: number, limit?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listQueryTemplates(type, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定平面、指定应用集群下、并在时间段范围内有效的软件实例列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
     * @summary 获取集群下软件实例列表
     * @param {string} platform 望京平面
     * @param {string} software 软件服务在k8s中的deployment名称
     * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
     * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSoftwareInstances(platform: string, software: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listSoftwareInstances(platform, software, timeType, fromTime, toTime, recentSeconds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询所有软件列表，用于显示软件logo等
     * @summary 查询软件列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSoftwares(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listSoftwares(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应使用/spans
     * @summary 按条件查询Span
     * @param {Array<string>} spanSnapshotId span快照ID，如果有多个快照则用数组给出
     * @param {string} [conditions] 在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。
     * @param {number} [pageNo] 查询指定的页号
     * @param {number} [pageSize] 对于每个异常下的报错span，每页显示多少条记录，如果不填写则默认10.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public querySpanBySnapshots(spanSnapshotId: Array<string>, conditions?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).querySpanBySnapshots(spanSnapshotId, conditions, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 20240208，更新查询模板时，可能也会更新模板名称，所以改为使用查询模板请求作为输入。
     * @summary 更新搜索模板
     * @param {string} templateId 传入参数为模板ID，根据模板ID获取搜索条件
     * @param {QueryTemplateRequest} [queryTemplateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateQueryTemplate(templateId: string, queryTemplateRequest?: QueryTemplateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateQueryTemplate(templateId, queryTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * Class1201Api - axios parameter creator
 * @export
 */
export const Class1201ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTracesBySpanSnapshots: async (spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('listTracesBySpanSnapshots', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/traces-by-snapshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class1201Api - functional programming interface
 * @export
 */
export const Class1201ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class1201ApiAxiosParamCreator(configuration)
    return {
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class1201Api.listTracesBySpanSnapshots']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * Class1201Api - factory interface
 * @export
 */
export const Class1201ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class1201ApiFp(configuration)
    return {
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<TraceListResponse> {
            return localVarFp.listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class1201Api - object-oriented interface
 * @export
 * @class Class1201Api
 * @extends {BaseAPI}
 */
export class Class1201Api extends BaseAPI {
    /**
     * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
     * @summary 获取Trace列表
     * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
     * @param {number} [pageNo] 访问页码
     * @param {number} [pageSize] 页面数据量，默认值20
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class1201Api
     */
    public listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return Class1201ApiFp(this.configuration).listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * Class20231104Api - axios parameter creator
 * @export
 */
export const Class20231104ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanFaultTrend: async (snapshotId: string, granularity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSpanFaultTrend', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/fault-trend`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanHeatmap: async (snapshotId: string, granularity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSpanHeatmap', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/heatmap`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceDetail: async (traceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'traceId' is not null or undefined
            assertParamExists('getTraceDetail', 'traceId', traceId)
            const localVarPath = `/traces/{traceId}`
                .replace(`{${"traceId"}}`, encodeURIComponent(String(traceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class20231104Api - functional programming interface
 * @export
 */
export const Class20231104ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class20231104ApiAxiosParamCreator(configuration)
    return {
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanFaultTrend(snapshotId: string, granularity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaultTrendResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanFaultTrend(snapshotId, granularity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20231104Api.getSpanFaultTrend']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanHeatmap(snapshotId: string, granularity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeatmapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanHeatmap(snapshotId, granularity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20231104Api.getSpanHeatmap']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTraceDetail(traceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraceDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTraceDetail(traceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20231104Api.getTraceDetail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * Class20231104Api - factory interface
 * @export
 */
export const Class20231104ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class20231104ApiFp(configuration)
    return {
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanFaultTrend(snapshotId: string, granularity?: number, options?: any): AxiosPromise<FaultTrendResponse> {
            return localVarFp.getSpanFaultTrend(snapshotId, granularity, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanHeatmap(snapshotId: string, granularity?: number, options?: any): AxiosPromise<HeatmapResponse> {
            return localVarFp.getSpanHeatmap(snapshotId, granularity, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceDetail(traceId: string, options?: any): AxiosPromise<TraceDetailResponse> {
            return localVarFp.getTraceDetail(traceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class20231104Api - object-oriented interface
 * @export
 * @class Class20231104Api
 * @extends {BaseAPI}
 */
export class Class20231104Api extends BaseAPI {
    /**
     * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
     * @summary 获取span报错趋势解析
     * @param {string} snapshotId 
     * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20231104Api
     */
    public getSpanFaultTrend(snapshotId: string, granularity?: number, options?: AxiosRequestConfig) {
        return Class20231104ApiFp(this.configuration).getSpanFaultTrend(snapshotId, granularity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
     * @summary 获取span热点图趋势解析
     * @param {string} snapshotId 
     * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20231104Api
     */
    public getSpanHeatmap(snapshotId: string, granularity?: number, options?: AxiosRequestConfig) {
        return Class20231104ApiFp(this.configuration).getSpanHeatmap(snapshotId, granularity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
     * @summary 获取Trace详情
     * @param {string} traceId UUID，traceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20231104Api
     */
    public getTraceDetail(traceId: string, options?: AxiosRequestConfig) {
        return Class20231104ApiFp(this.configuration).getTraceDetail(traceId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * Class20231210Api - axios parameter creator
 * @export
 */
export const Class20231210ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceDetail: async (traceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'traceId' is not null or undefined
            assertParamExists('getTraceDetail', 'traceId', traceId)
            const localVarPath = `/traces/{traceId}`
                .replace(`{${"traceId"}}`, encodeURIComponent(String(traceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class20231210Api - functional programming interface
 * @export
 */
export const Class20231210ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class20231210ApiAxiosParamCreator(configuration)
    return {
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTraceDetail(traceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraceDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTraceDetail(traceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20231210Api.getTraceDetail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * Class20231210Api - factory interface
 * @export
 */
export const Class20231210ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class20231210ApiFp(configuration)
    return {
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceDetail(traceId: string, options?: any): AxiosPromise<TraceDetailResponse> {
            return localVarFp.getTraceDetail(traceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class20231210Api - object-oriented interface
 * @export
 * @class Class20231210Api
 * @extends {BaseAPI}
 */
export class Class20231210Api extends BaseAPI {
    /**
     * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
     * @summary 获取Trace详情
     * @param {string} traceId UUID，traceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20231210Api
     */
    public getTraceDetail(traceId: string, options?: AxiosRequestConfig) {
        return Class20231210ApiFp(this.configuration).getTraceDetail(traceId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * Class20240113Api - axios parameter creator
 * @export
 */
export const Class20240113ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanFaultTrend: async (snapshotId: string, granularity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSpanFaultTrend', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/fault-trend`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanHeatmap: async (snapshotId: string, granularity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSpanHeatmap', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/heatmap`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTracesBySpanSnapshots: async (spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('listTracesBySpanSnapshots', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/traces-by-snapshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class20240113Api - functional programming interface
 * @export
 */
export const Class20240113ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class20240113ApiAxiosParamCreator(configuration)
    return {
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanFaultTrend(snapshotId: string, granularity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaultTrendResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanFaultTrend(snapshotId, granularity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240113Api.getSpanFaultTrend']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanHeatmap(snapshotId: string, granularity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeatmapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanHeatmap(snapshotId, granularity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240113Api.getSpanHeatmap']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240113Api.listTracesBySpanSnapshots']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * Class20240113Api - factory interface
 * @export
 */
export const Class20240113ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class20240113ApiFp(configuration)
    return {
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanFaultTrend(snapshotId: string, granularity?: number, options?: any): AxiosPromise<FaultTrendResponse> {
            return localVarFp.getSpanFaultTrend(snapshotId, granularity, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanHeatmap(snapshotId: string, granularity?: number, options?: any): AxiosPromise<HeatmapResponse> {
            return localVarFp.getSpanHeatmap(snapshotId, granularity, options).then((request) => request(axios, basePath));
        },
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<TraceListResponse> {
            return localVarFp.listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class20240113Api - object-oriented interface
 * @export
 * @class Class20240113Api
 * @extends {BaseAPI}
 */
export class Class20240113Api extends BaseAPI {
    /**
     * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
     * @summary 获取span报错趋势解析
     * @param {string} snapshotId 
     * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240113Api
     */
    public getSpanFaultTrend(snapshotId: string, granularity?: number, options?: AxiosRequestConfig) {
        return Class20240113ApiFp(this.configuration).getSpanFaultTrend(snapshotId, granularity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
     * @summary 获取span热点图趋势解析
     * @param {string} snapshotId 
     * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240113Api
     */
    public getSpanHeatmap(snapshotId: string, granularity?: number, options?: AxiosRequestConfig) {
        return Class20240113ApiFp(this.configuration).getSpanHeatmap(snapshotId, granularity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
     * @summary 获取Trace列表
     * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
     * @param {number} [pageNo] 访问页码
     * @param {number} [pageSize] 页面数据量，默认值20
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240113Api
     */
    public listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return Class20240113ApiFp(this.configuration).listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * Class20240116Api - axios parameter creator
 * @export
 */
export const Class20240116ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTracesBySpanSnapshots: async (spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('listTracesBySpanSnapshots', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/traces-by-snapshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class20240116Api - functional programming interface
 * @export
 */
export const Class20240116ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class20240116ApiAxiosParamCreator(configuration)
    return {
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240116Api.listTracesBySpanSnapshots']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * Class20240116Api - factory interface
 * @export
 */
export const Class20240116ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class20240116ApiFp(configuration)
    return {
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<TraceListResponse> {
            return localVarFp.listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class20240116Api - object-oriented interface
 * @export
 * @class Class20240116Api
 * @extends {BaseAPI}
 */
export class Class20240116Api extends BaseAPI {
    /**
     * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
     * @summary 获取Trace列表
     * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
     * @param {number} [pageNo] 访问页码
     * @param {number} [pageSize] 页面数据量，默认值20
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240116Api
     */
    public listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return Class20240116ApiFp(this.configuration).listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * Class20240117Api - axios parameter creator
 * @export
 */
export const Class20240117ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件key列表
         * @param {number} type 1-span条件；2-log条件；3-metrics条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionKeys: async (type: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listConditionKeys', 'type', type)
            const localVarPath = `/condition-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class20240117Api - functional programming interface
 * @export
 */
export const Class20240117ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class20240117ApiAxiosParamCreator(configuration)
    return {
        /**
         * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件key列表
         * @param {number} type 1-span条件；2-log条件；3-metrics条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConditionKeys(type: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConditionKeyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConditionKeys(type, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240117Api.listConditionKeys']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * Class20240117Api - factory interface
 * @export
 */
export const Class20240117ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class20240117ApiFp(configuration)
    return {
        /**
         * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件key列表
         * @param {number} type 1-span条件；2-log条件；3-metrics条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionKeys(type: number, options?: any): AxiosPromise<ConditionKeyListResponse> {
            return localVarFp.listConditionKeys(type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class20240117Api - object-oriented interface
 * @export
 * @class Class20240117Api
 * @extends {BaseAPI}
 */
export class Class20240117Api extends BaseAPI {
    /**
     * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
     * @summary 查询条件key列表
     * @param {number} type 1-span条件；2-log条件；3-metrics条件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240117Api
     */
    public listConditionKeys(type: number, options?: AxiosRequestConfig) {
        return Class20240117ApiFp(this.configuration).listConditionKeys(type, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * Class20240118Api - axios parameter creator
 * @export
 */
export const Class20240118ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanFaultTrend: async (snapshotId: string, granularity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSpanFaultTrend', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/fault-trend`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanHeatmap: async (snapshotId: string, granularity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSpanHeatmap', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/heatmap`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class20240118Api - functional programming interface
 * @export
 */
export const Class20240118ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class20240118ApiAxiosParamCreator(configuration)
    return {
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanFaultTrend(snapshotId: string, granularity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaultTrendResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanFaultTrend(snapshotId, granularity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240118Api.getSpanFaultTrend']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanHeatmap(snapshotId: string, granularity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeatmapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanHeatmap(snapshotId, granularity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240118Api.getSpanHeatmap']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * Class20240118Api - factory interface
 * @export
 */
export const Class20240118ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class20240118ApiFp(configuration)
    return {
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanFaultTrend(snapshotId: string, granularity?: number, options?: any): AxiosPromise<FaultTrendResponse> {
            return localVarFp.getSpanFaultTrend(snapshotId, granularity, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanHeatmap(snapshotId: string, granularity?: number, options?: any): AxiosPromise<HeatmapResponse> {
            return localVarFp.getSpanHeatmap(snapshotId, granularity, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class20240118Api - object-oriented interface
 * @export
 * @class Class20240118Api
 * @extends {BaseAPI}
 */
export class Class20240118Api extends BaseAPI {
    /**
     * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
     * @summary 获取span报错趋势解析
     * @param {string} snapshotId 
     * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240118Api
     */
    public getSpanFaultTrend(snapshotId: string, granularity?: number, options?: AxiosRequestConfig) {
        return Class20240118ApiFp(this.configuration).getSpanFaultTrend(snapshotId, granularity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
     * @summary 获取span热点图趋势解析
     * @param {string} snapshotId 
     * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240118Api
     */
    public getSpanHeatmap(snapshotId: string, granularity?: number, options?: AxiosRequestConfig) {
        return Class20240118ApiFp(this.configuration).getSpanHeatmap(snapshotId, granularity, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * Class20240208Api - axios parameter creator
 * @export
 */
export const Class20240208ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 20240208，查询模板请求中，type改为枚举类型
         * @summary 创建查询模板
         * @param {QueryTemplateRequest} [queryTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryTemplate: async (queryTemplateRequest?: QueryTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/query-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据查询条件创建服务地图数据返回，供前端绘制服务地图。  20240208，修改服务地图响应数据结构，并将其包含的span快照功能放到“创建span快照”接口中去。 20240311, 删除参数中的instance节点
         * @summary 创建服务地图
         * @param {ServiceMapRequest} [serviceMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceMap: async (serviceMapRequest?: ServiceMapRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services-map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceMapRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
         * @summary 创建Span快照
         * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpanSnapshot: async (createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/span-snapshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSpanSnapshotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据指定的span快照ID、以及颗粒度等条件，为当前登录用户创建Span解析条件  20240208，梳理业务逻辑，新增该接口。该接口用途：1）用于框选趋势图时创建快照；2）用于在服务诊断界面进一步筛选span；
         * @summary 创建span子快照
         * @param {string} snapshotId 用于创建子快照的父快照ID
         * @param {SpanSubSnapshotRequest} [spanSubSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubSpanSnapshot: async (snapshotId: string, spanSubSnapshotRequest?: SpanSubSnapshotRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('createSubSpanSnapshot', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/subSnapshots`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spanSubSnapshotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定span快照的应用实例资源列表。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断异常应用实例解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanAppInstances: async (spanSnapshotId: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('getSpanAppInstances', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/span-diagnosis/app-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据traceId和spanId查询其内包含的应用日志列表
         * @summary 查询span内应用日志
         * @param {string} traceId 要查询应用日志的traceId
         * @param {string} spanId 要查询应用日志的trace下spanId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanAppLogs: async (traceId: string, spanId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'traceId' is not null or undefined
            assertParamExists('getSpanAppLogs', 'traceId', traceId)
            // verify required parameter 'spanId' is not null or undefined
            assertParamExists('getSpanAppLogs', 'spanId', spanId)
            const localVarPath = `/traces/{traceId}/spans/{spanId}/app-logs`
                .replace(`{${"traceId"}}`, encodeURIComponent(String(traceId)))
                .replace(`{${"spanId"}}`, encodeURIComponent(String(spanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定span快照的自身时延趋势统计。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断时延趋势解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表进行self duration趋势分析。如果有多个快照，可以作为数组参数传入。
         * @param {Array<Percentile>} [percentiles] 需查询的统计比率
         * @param {Array<DurationType>} [durationTypes] 需查询的时延类型：1-自身时延，2-gap时延，3-Trace时延
         * @param {number} [granularity] 解析趋势的时间颗粒度，单位是秒，空表示自动。
         * @param {number} [fromTime] 计算时延趋势的起始时间，UNIX时间戳
         * @param {number} [toTime] 计算时延趋势的截止时间，UNIX时间戳
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanDurationTrends: async (spanSnapshotId: Array<string>, percentiles?: Array<Percentile>, durationTypes?: Array<DurationType>, granularity?: number, fromTime?: number, toTime?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('getSpanDurationTrends', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/span-diagnosis/duration-trend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }

            if (percentiles) {
                localVarQueryParameter['percentiles'] = percentiles;
            }

            if (durationTypes) {
                localVarQueryParameter['durationTypes'] = durationTypes;
            }

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }

            if (fromTime !== undefined) {
                localVarQueryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['toTime'] = toTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据预先创建的span快照，对其进行报错解析。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断报错解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表中应用报错日志进行统计识别。如果有多个快照，可以作为数组参数传入。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanExceptionAnalysis: async (spanSnapshotId: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('getSpanExceptionAnalysis', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/span-diagnosis/exception-analysis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanFaultTrend: async (snapshotId: string, granularity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSpanFaultTrend', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/fault-trend`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanHeatmap: async (snapshotId: string, granularity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSpanHeatmap', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/heatmap`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceDetail: async (traceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'traceId' is not null or undefined
            assertParamExists('getTraceDetail', 'traceId', traceId)
            const localVarPath = `/traces/{traceId}`
                .replace(`{${"traceId"}}`, encodeURIComponent(String(traceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 初因span列表
         * @param {string} spanSnapshotId span快照ID
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceFaults: async (spanSnapshotId: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('getTraceFaults', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/span-diagnosis/trace-faults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId !== undefined) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据span快照ID、以及给定的分组条件字段（不可为空）生成分组后的多个快照ID。
         * @summary 将span快照按条件分组
         * @param {string} spanSnapshotId 用于进行span快照分组的span父快照ID
         * @param {Array<SpanGroupField> | null} [spanGroupField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupSpanSnapshots: async (spanSnapshotId: string, spanGroupField?: Array<SpanGroupField> | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('groupSpanSnapshots', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/span-snapshots/{spanSnapshotId}/groups`
                .replace(`{${"spanSnapshotId"}}`, encodeURIComponent(String(spanSnapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spanGroupField, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 识别指定span快照下所有span五类属性（基本信息、spanAttribuites、resourceAttribuites、requestAttribuites、responseAttribuites)的最大N的共有属性（N是可配置参数，由max_commonality_count指定，默认为6）  20240208，根据新的产品设计新增该接口。
         * @summary 获取span共性识别结果
         * @param {string} snapshotId 用于进行共性分析的span快照ID
         * @param {number} [limit] 用来获取共有属性的个数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifySpanCommonalities: async (snapshotId: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('identifySpanCommonalities', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/commonalities`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定平面下的应用集群列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造
         * @summary 获取平面下应用集群列表
         * @param {string} platform 平面编码名称（非显示名称）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppClusters: async (platform: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('listAppClusters', 'platform', platform)
            const localVarPath = `/platforms/{platform}/app-clusters`
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定平面、指定应用集群下、并在时间段范围内有效的应用实例列表，包含名称和显示名称。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
         * @summary 获取集群下应用实例列表
         * @param {string} platform 望京平面
         * @param {string} cluster 营业厅接入的订单中心
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppInstances: async (platform: string, cluster: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('listAppInstances', 'platform', platform)
            // verify required parameter 'cluster' is not null or undefined
            assertParamExists('listAppInstances', 'cluster', cluster)
            const localVarPath = `/platforms/{platform}/app-clusters/{cluster}/app-instances`
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)))
                .replace(`{${"cluster"}}`, encodeURIComponent(String(cluster)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (timeType !== undefined) {
                localVarQueryParameter['timeType'] = timeType;
            }

            if (fromTime !== undefined) {
                localVarQueryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['toTime'] = toTime;
            }

            if (recentSeconds !== undefined) {
                localVarQueryParameter['recentSeconds'] = recentSeconds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据log快照ID查询出该log快照中的所有log信息列表，用分页表示  20240208，根据新产品原型，新增该接口  20240222，根据讨论结果，改为使用通用查询条件查询
         * @summary 查询Log列表
         * @param {number} [pageNo] 当前页号
         * @param {number} [pageSize] 每页记录数
         * @param {QueryConditions} [queryConditions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppLogs: async (pageNo?: number, pageSize?: number, queryConditions?: QueryConditions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/app-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryConditions, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件key列表
         * @param {number} type 1-span条件；2-log条件；3-metrics条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionKeys: async (type: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listConditionKeys', 'type', type)
            const localVarPath = `/condition-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件某key取值列表
         * @param {number} keyId 查询条件key的主键ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionValues: async (keyId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyId' is not null or undefined
            assertParamExists('listConditionValues', 'keyId', keyId)
            const localVarPath = `/condition-keys/{keyId}/values`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获得系统当前的所有数据中心平面列表  获取指定平面下的应用集群列表，包含名称和显示名称。  20240208，按照RESTful规范新增该接口。
         * @summary 获得平面列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlatforms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/platforms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定平面、指定应用集群下、并在时间段范围内有效的软件实例列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
         * @summary 获取集群下软件实例列表
         * @param {string} platform 望京平面
         * @param {string} software 软件服务在k8s中的deployment名称
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoftwareInstances: async (platform: string, software: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('listSoftwareInstances', 'platform', platform)
            // verify required parameter 'software' is not null or undefined
            assertParamExists('listSoftwareInstances', 'software', software)
            const localVarPath = `/platforms/{platform}/softwares/{software}/instances`
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)))
                .replace(`{${"software"}}`, encodeURIComponent(String(software)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (timeType !== undefined) {
                localVarQueryParameter['timeType'] = timeType;
            }

            if (fromTime !== undefined) {
                localVarQueryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['toTime'] = toTime;
            }

            if (recentSeconds !== undefined) {
                localVarQueryParameter['recentSeconds'] = recentSeconds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询所有软件列表，用于显示软件logo等
         * @summary 查询软件列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoftwares: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/softwares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 列出指定span快照ID下的子快照条件列表 replace usergroup history
         * @summary 获取span子快照条件列表
         * @param {string} snapshotId 用于创建子快照的父快照ID
         * @param {number} [limit] 获取该用户的span解析记录数，默认情况下服务器最多返回10条
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpanAnalysisConditions: async (snapshotId: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('listSpanAnalysisConditions', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/subSnapshots/conditions`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTracesBySpanSnapshots: async (spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('listTracesBySpanSnapshots', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/traces-by-snapshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应使用/spans
         * @summary 按条件查询Span
         * @param {Array<string>} spanSnapshotId span快照ID，如果有多个快照则用数组给出
         * @param {string} [conditions] 在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。
         * @param {number} [pageNo] 查询指定的页号
         * @param {number} [pageSize] 对于每个异常下的报错span，每页显示多少条记录，如果不填写则默认10.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        querySpanBySnapshots: async (spanSnapshotId: Array<string>, conditions?: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('querySpanBySnapshots', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/spans-by-snapshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }

            if (conditions !== undefined) {
                localVarQueryParameter['conditions'] = conditions;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 20240208，更新查询模板时，可能也会更新模板名称，所以改为使用查询模板请求作为输入。
         * @summary 更新搜索模板
         * @param {string} templateId 传入参数为模板ID，根据模板ID获取搜索条件
         * @param {QueryTemplateRequest} [queryTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryTemplate: async (templateId: string, queryTemplateRequest?: QueryTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('updateQueryTemplate', 'templateId', templateId)
            const localVarPath = `/query-templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryTemplateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class20240208Api - functional programming interface
 * @export
 */
export const Class20240208ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class20240208ApiAxiosParamCreator(configuration)
    return {
        /**
         * 20240208，查询模板请求中，type改为枚举类型
         * @summary 创建查询模板
         * @param {QueryTemplateRequest} [queryTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQueryTemplate(queryTemplateRequest?: QueryTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQueryTemplate(queryTemplateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.createQueryTemplate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据查询条件创建服务地图数据返回，供前端绘制服务地图。  20240208，修改服务地图响应数据结构，并将其包含的span快照功能放到“创建span快照”接口中去。 20240311, 删除参数中的instance节点
         * @summary 创建服务地图
         * @param {ServiceMapRequest} [serviceMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceMap(serviceMapRequest?: ServiceMapRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceMapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceMap(serviceMapRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.createServiceMap']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
         * @summary 创建Span快照
         * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSpanSnapshot(createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSpanSnapshot(createSpanSnapshotRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.createSpanSnapshot']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据指定的span快照ID、以及颗粒度等条件，为当前登录用户创建Span解析条件  20240208，梳理业务逻辑，新增该接口。该接口用途：1）用于框选趋势图时创建快照；2）用于在服务诊断界面进一步筛选span；
         * @summary 创建span子快照
         * @param {string} snapshotId 用于创建子快照的父快照ID
         * @param {SpanSubSnapshotRequest} [spanSubSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubSpanSnapshot(snapshotId: string, spanSubSnapshotRequest?: SpanSubSnapshotRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubSpanSnapshot(snapshotId, spanSubSnapshotRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.createSubSpanSnapshot']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定span快照的应用实例资源列表。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断异常应用实例解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanAppInstances(spanSnapshotId: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitialCauseAppInstanceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanAppInstances(spanSnapshotId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.getSpanAppInstances']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据traceId和spanId查询其内包含的应用日志列表
         * @summary 查询span内应用日志
         * @param {string} traceId 要查询应用日志的traceId
         * @param {string} spanId 要查询应用日志的trace下spanId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanAppLogs(traceId: string, spanId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppLogDetailListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanAppLogs(traceId, spanId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.getSpanAppLogs']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定span快照的自身时延趋势统计。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断时延趋势解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表进行self duration趋势分析。如果有多个快照，可以作为数组参数传入。
         * @param {Array<Percentile>} [percentiles] 需查询的统计比率
         * @param {Array<DurationType>} [durationTypes] 需查询的时延类型：1-自身时延，2-gap时延，3-Trace时延
         * @param {number} [granularity] 解析趋势的时间颗粒度，单位是秒，空表示自动。
         * @param {number} [fromTime] 计算时延趋势的起始时间，UNIX时间戳
         * @param {number} [toTime] 计算时延趋势的截止时间，UNIX时间戳
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanDurationTrends(spanSnapshotId: Array<string>, percentiles?: Array<Percentile>, durationTypes?: Array<DurationType>, granularity?: number, fromTime?: number, toTime?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DurationTrendResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanDurationTrends(spanSnapshotId, percentiles, durationTypes, granularity, fromTime, toTime, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.getSpanDurationTrends']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据预先创建的span快照，对其进行报错解析。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断报错解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表中应用报错日志进行统计识别。如果有多个快照，可以作为数组参数传入。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanExceptionAnalysis(spanSnapshotId: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceErrorDiagnosisResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanExceptionAnalysis(spanSnapshotId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.getSpanExceptionAnalysis']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanFaultTrend(snapshotId: string, granularity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaultTrendResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanFaultTrend(snapshotId, granularity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.getSpanFaultTrend']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanHeatmap(snapshotId: string, granularity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeatmapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanHeatmap(snapshotId, granularity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.getSpanHeatmap']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTraceDetail(traceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraceDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTraceDetail(traceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.getTraceDetail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 初因span列表
         * @param {string} spanSnapshotId span快照ID
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTraceFaults(spanSnapshotId: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitialCauseSpanListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTraceFaults(spanSnapshotId, pageNo, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.getTraceFaults']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据span快照ID、以及给定的分组条件字段（不可为空）生成分组后的多个快照ID。
         * @summary 将span快照按条件分组
         * @param {string} spanSnapshotId 用于进行span快照分组的span父快照ID
         * @param {Array<SpanGroupField> | null} [spanGroupField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupSpanSnapshots(spanSnapshotId: string, spanGroupField?: Array<SpanGroupField> | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpanGroupListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupSpanSnapshots(spanSnapshotId, spanGroupField, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.groupSpanSnapshots']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 识别指定span快照下所有span五类属性（基本信息、spanAttribuites、resourceAttribuites、requestAttribuites、responseAttribuites)的最大N的共有属性（N是可配置参数，由max_commonality_count指定，默认为6）  20240208，根据新的产品设计新增该接口。
         * @summary 获取span共性识别结果
         * @param {string} snapshotId 用于进行共性分析的span快照ID
         * @param {number} [limit] 用来获取共有属性的个数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async identifySpanCommonalities(snapshotId: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpanCommonalityListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.identifySpanCommonalities(snapshotId, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.identifySpanCommonalities']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定平面下的应用集群列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造
         * @summary 获取平面下应用集群列表
         * @param {string} platform 平面编码名称（非显示名称）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppClusters(platform: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NameDisplayListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAppClusters(platform, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.listAppClusters']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定平面、指定应用集群下、并在时间段范围内有效的应用实例列表，包含名称和显示名称。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
         * @summary 获取集群下应用实例列表
         * @param {string} platform 望京平面
         * @param {string} cluster 营业厅接入的订单中心
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppInstances(platform: string, cluster: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAppInstances(platform, cluster, timeType, fromTime, toTime, recentSeconds, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.listAppInstances']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据log快照ID查询出该log快照中的所有log信息列表，用分页表示  20240208，根据新产品原型，新增该接口  20240222，根据讨论结果，改为使用通用查询条件查询
         * @summary 查询Log列表
         * @param {number} [pageNo] 当前页号
         * @param {number} [pageSize] 每页记录数
         * @param {QueryConditions} [queryConditions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAppLogs(pageNo?: number, pageSize?: number, queryConditions?: QueryConditions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppLogListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAppLogs(pageNo, pageSize, queryConditions, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.listAppLogs']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件key列表
         * @param {number} type 1-span条件；2-log条件；3-metrics条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConditionKeys(type: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConditionKeyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConditionKeys(type, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.listConditionKeys']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件某key取值列表
         * @param {number} keyId 查询条件key的主键ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConditionValues(keyId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConditionValues(keyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.listConditionValues']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获得系统当前的所有数据中心平面列表  获取指定平面下的应用集群列表，包含名称和显示名称。  20240208，按照RESTful规范新增该接口。
         * @summary 获得平面列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPlatforms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NameDisplayListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPlatforms(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.listPlatforms']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定平面、指定应用集群下、并在时间段范围内有效的软件实例列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
         * @summary 获取集群下软件实例列表
         * @param {string} platform 望京平面
         * @param {string} software 软件服务在k8s中的deployment名称
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSoftwareInstances(platform: string, software: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSoftwareInstances(platform, software, timeType, fromTime, toTime, recentSeconds, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.listSoftwareInstances']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 查询所有软件列表，用于显示软件logo等
         * @summary 查询软件列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSoftwares(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SoftwareListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSoftwares(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.listSoftwares']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 列出指定span快照ID下的子快照条件列表 replace usergroup history
         * @summary 获取span子快照条件列表
         * @param {string} snapshotId 用于创建子快照的父快照ID
         * @param {number} [limit] 获取该用户的span解析记录数，默认情况下服务器最多返回10条
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSpanAnalysisConditions(snapshotId: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpanSnapshotConditionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSpanAnalysisConditions(snapshotId, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.listSpanAnalysisConditions']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.listTracesBySpanSnapshots']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 应使用/spans
         * @summary 按条件查询Span
         * @param {Array<string>} spanSnapshotId span快照ID，如果有多个快照则用数组给出
         * @param {string} [conditions] 在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。
         * @param {number} [pageNo] 查询指定的页号
         * @param {number} [pageSize] 对于每个异常下的报错span，每页显示多少条记录，如果不填写则默认10.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async querySpanBySnapshots(spanSnapshotId: Array<string>, conditions?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpanListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.querySpanBySnapshots(spanSnapshotId, conditions, pageNo, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.querySpanBySnapshots']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 20240208，更新查询模板时，可能也会更新模板名称，所以改为使用查询模板请求作为输入。
         * @summary 更新搜索模板
         * @param {string} templateId 传入参数为模板ID，根据模板ID获取搜索条件
         * @param {QueryTemplateRequest} [queryTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQueryTemplate(templateId: string, queryTemplateRequest?: QueryTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQueryTemplate(templateId, queryTemplateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240208Api.updateQueryTemplate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * Class20240208Api - factory interface
 * @export
 */
export const Class20240208ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class20240208ApiFp(configuration)
    return {
        /**
         * 20240208，查询模板请求中，type改为枚举类型
         * @summary 创建查询模板
         * @param {QueryTemplateRequest} [queryTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryTemplate(queryTemplateRequest?: QueryTemplateRequest, options?: any): AxiosPromise<QueryTemplateResponse> {
            return localVarFp.createQueryTemplate(queryTemplateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据查询条件创建服务地图数据返回，供前端绘制服务地图。  20240208，修改服务地图响应数据结构，并将其包含的span快照功能放到“创建span快照”接口中去。 20240311, 删除参数中的instance节点
         * @summary 创建服务地图
         * @param {ServiceMapRequest} [serviceMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceMap(serviceMapRequest?: ServiceMapRequest, options?: any): AxiosPromise<ServiceMapResponse> {
            return localVarFp.createServiceMap(serviceMapRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
         * @summary 创建Span快照
         * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpanSnapshot(createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.createSpanSnapshot(createSpanSnapshotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据指定的span快照ID、以及颗粒度等条件，为当前登录用户创建Span解析条件  20240208，梳理业务逻辑，新增该接口。该接口用途：1）用于框选趋势图时创建快照；2）用于在服务诊断界面进一步筛选span；
         * @summary 创建span子快照
         * @param {string} snapshotId 用于创建子快照的父快照ID
         * @param {SpanSubSnapshotRequest} [spanSubSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubSpanSnapshot(snapshotId: string, spanSubSnapshotRequest?: SpanSubSnapshotRequest, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.createSubSpanSnapshot(snapshotId, spanSubSnapshotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定span快照的应用实例资源列表。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断异常应用实例解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanAppInstances(spanSnapshotId: Array<string>, options?: any): AxiosPromise<InitialCauseAppInstanceListResponse> {
            return localVarFp.getSpanAppInstances(spanSnapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据traceId和spanId查询其内包含的应用日志列表
         * @summary 查询span内应用日志
         * @param {string} traceId 要查询应用日志的traceId
         * @param {string} spanId 要查询应用日志的trace下spanId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanAppLogs(traceId: string, spanId: string, options?: any): AxiosPromise<AppLogDetailListResponse> {
            return localVarFp.getSpanAppLogs(traceId, spanId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定span快照的自身时延趋势统计。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断时延趋势解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表进行self duration趋势分析。如果有多个快照，可以作为数组参数传入。
         * @param {Array<Percentile>} [percentiles] 需查询的统计比率
         * @param {Array<DurationType>} [durationTypes] 需查询的时延类型：1-自身时延，2-gap时延，3-Trace时延
         * @param {number} [granularity] 解析趋势的时间颗粒度，单位是秒，空表示自动。
         * @param {number} [fromTime] 计算时延趋势的起始时间，UNIX时间戳
         * @param {number} [toTime] 计算时延趋势的截止时间，UNIX时间戳
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanDurationTrends(spanSnapshotId: Array<string>, percentiles?: Array<Percentile>, durationTypes?: Array<DurationType>, granularity?: number, fromTime?: number, toTime?: number, options?: any): AxiosPromise<DurationTrendResponse> {
            return localVarFp.getSpanDurationTrends(spanSnapshotId, percentiles, durationTypes, granularity, fromTime, toTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据预先创建的span快照，对其进行报错解析。  20240208，根据新的产品设计设计该接口。
         * @summary span诊断报错解析
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表中应用报错日志进行统计识别。如果有多个快照，可以作为数组参数传入。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanExceptionAnalysis(spanSnapshotId: Array<string>, options?: any): AxiosPromise<ServiceErrorDiagnosisResponse> {
            return localVarFp.getSpanExceptionAnalysis(spanSnapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanFaultTrend(snapshotId: string, granularity?: number, options?: any): AxiosPromise<FaultTrendResponse> {
            return localVarFp.getSpanFaultTrend(snapshotId, granularity, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanHeatmap(snapshotId: string, granularity?: number, options?: any): AxiosPromise<HeatmapResponse> {
            return localVarFp.getSpanHeatmap(snapshotId, granularity, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceDetail(traceId: string, options?: any): AxiosPromise<TraceDetailResponse> {
            return localVarFp.getTraceDetail(traceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 初因span列表
         * @param {string} spanSnapshotId span快照ID
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceFaults(spanSnapshotId: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<InitialCauseSpanListResponse> {
            return localVarFp.getTraceFaults(spanSnapshotId, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据span快照ID、以及给定的分组条件字段（不可为空）生成分组后的多个快照ID。
         * @summary 将span快照按条件分组
         * @param {string} spanSnapshotId 用于进行span快照分组的span父快照ID
         * @param {Array<SpanGroupField> | null} [spanGroupField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupSpanSnapshots(spanSnapshotId: string, spanGroupField?: Array<SpanGroupField> | null, options?: any): AxiosPromise<SpanGroupListResponse> {
            return localVarFp.groupSpanSnapshots(spanSnapshotId, spanGroupField, options).then((request) => request(axios, basePath));
        },
        /**
         * 识别指定span快照下所有span五类属性（基本信息、spanAttribuites、resourceAttribuites、requestAttribuites、responseAttribuites)的最大N的共有属性（N是可配置参数，由max_commonality_count指定，默认为6）  20240208，根据新的产品设计新增该接口。
         * @summary 获取span共性识别结果
         * @param {string} snapshotId 用于进行共性分析的span快照ID
         * @param {number} [limit] 用来获取共有属性的个数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identifySpanCommonalities(snapshotId: string, limit?: number, options?: any): AxiosPromise<SpanCommonalityListResponse> {
            return localVarFp.identifySpanCommonalities(snapshotId, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定平面下的应用集群列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造
         * @summary 获取平面下应用集群列表
         * @param {string} platform 平面编码名称（非显示名称）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppClusters(platform: string, options?: any): AxiosPromise<NameDisplayListResponse> {
            return localVarFp.listAppClusters(platform, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定平面、指定应用集群下、并在时间段范围内有效的应用实例列表，包含名称和显示名称。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
         * @summary 获取集群下应用实例列表
         * @param {string} platform 望京平面
         * @param {string} cluster 营业厅接入的订单中心
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppInstances(platform: string, cluster: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: any): AxiosPromise<InstanceListResponse> {
            return localVarFp.listAppInstances(platform, cluster, timeType, fromTime, toTime, recentSeconds, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据log快照ID查询出该log快照中的所有log信息列表，用分页表示  20240208，根据新产品原型，新增该接口  20240222，根据讨论结果，改为使用通用查询条件查询
         * @summary 查询Log列表
         * @param {number} [pageNo] 当前页号
         * @param {number} [pageSize] 每页记录数
         * @param {QueryConditions} [queryConditions] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppLogs(pageNo?: number, pageSize?: number, queryConditions?: QueryConditions, options?: any): AxiosPromise<AppLogListResponse> {
            return localVarFp.listAppLogs(pageNo, pageSize, queryConditions, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件key列表
         * @param {number} type 1-span条件；2-log条件；3-metrics条件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionKeys(type: number, options?: any): AxiosPromise<ConditionKeyListResponse> {
            return localVarFp.listConditionKeys(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
         * @summary 查询条件某key取值列表
         * @param {number} keyId 查询条件key的主键ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConditionValues(keyId: number, options?: any): AxiosPromise<StringListResponse> {
            return localVarFp.listConditionValues(keyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获得系统当前的所有数据中心平面列表  获取指定平面下的应用集群列表，包含名称和显示名称。  20240208，按照RESTful规范新增该接口。
         * @summary 获得平面列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlatforms(options?: any): AxiosPromise<NameDisplayListResponse> {
            return localVarFp.listPlatforms(options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定平面、指定应用集群下、并在时间段范围内有效的软件实例列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
         * @summary 获取集群下软件实例列表
         * @param {string} platform 望京平面
         * @param {string} software 软件服务在k8s中的deployment名称
         * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
         * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
         * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoftwareInstances(platform: string, software: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: any): AxiosPromise<InstanceListResponse> {
            return localVarFp.listSoftwareInstances(platform, software, timeType, fromTime, toTime, recentSeconds, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询所有软件列表，用于显示软件logo等
         * @summary 查询软件列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSoftwares(options?: any): AxiosPromise<SoftwareListResponse> {
            return localVarFp.listSoftwares(options).then((request) => request(axios, basePath));
        },
        /**
         * 列出指定span快照ID下的子快照条件列表 replace usergroup history
         * @summary 获取span子快照条件列表
         * @param {string} snapshotId 用于创建子快照的父快照ID
         * @param {number} [limit] 获取该用户的span解析记录数，默认情况下服务器最多返回10条
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpanAnalysisConditions(snapshotId: string, limit?: number, options?: any): AxiosPromise<SpanSnapshotConditionListResponse> {
            return localVarFp.listSpanAnalysisConditions(snapshotId, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<TraceListResponse> {
            return localVarFp.listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 应使用/spans
         * @summary 按条件查询Span
         * @param {Array<string>} spanSnapshotId span快照ID，如果有多个快照则用数组给出
         * @param {string} [conditions] 在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。
         * @param {number} [pageNo] 查询指定的页号
         * @param {number} [pageSize] 对于每个异常下的报错span，每页显示多少条记录，如果不填写则默认10.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        querySpanBySnapshots(spanSnapshotId: Array<string>, conditions?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<SpanListResponse> {
            return localVarFp.querySpanBySnapshots(spanSnapshotId, conditions, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 20240208，更新查询模板时，可能也会更新模板名称，所以改为使用查询模板请求作为输入。
         * @summary 更新搜索模板
         * @param {string} templateId 传入参数为模板ID，根据模板ID获取搜索条件
         * @param {QueryTemplateRequest} [queryTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryTemplate(templateId: string, queryTemplateRequest?: QueryTemplateRequest, options?: any): AxiosPromise<QueryTemplateResponse> {
            return localVarFp.updateQueryTemplate(templateId, queryTemplateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class20240208Api - object-oriented interface
 * @export
 * @class Class20240208Api
 * @extends {BaseAPI}
 */
export class Class20240208Api extends BaseAPI {
    /**
     * 20240208，查询模板请求中，type改为枚举类型
     * @summary 创建查询模板
     * @param {QueryTemplateRequest} [queryTemplateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public createQueryTemplate(queryTemplateRequest?: QueryTemplateRequest, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).createQueryTemplate(queryTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据查询条件创建服务地图数据返回，供前端绘制服务地图。  20240208，修改服务地图响应数据结构，并将其包含的span快照功能放到“创建span快照”接口中去。 20240311, 删除参数中的instance节点
     * @summary 创建服务地图
     * @param {ServiceMapRequest} [serviceMapRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public createServiceMap(serviceMapRequest?: ServiceMapRequest, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).createServiceMap(serviceMapRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
     * @summary 创建Span快照
     * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public createSpanSnapshot(createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).createSpanSnapshot(createSpanSnapshotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据指定的span快照ID、以及颗粒度等条件，为当前登录用户创建Span解析条件  20240208，梳理业务逻辑，新增该接口。该接口用途：1）用于框选趋势图时创建快照；2）用于在服务诊断界面进一步筛选span；
     * @summary 创建span子快照
     * @param {string} snapshotId 用于创建子快照的父快照ID
     * @param {SpanSubSnapshotRequest} [spanSubSnapshotRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public createSubSpanSnapshot(snapshotId: string, spanSubSnapshotRequest?: SpanSubSnapshotRequest, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).createSubSpanSnapshot(snapshotId, spanSubSnapshotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定span快照的应用实例资源列表。  20240208，根据新的产品设计设计该接口。
     * @summary span诊断异常应用实例解析
     * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public getSpanAppInstances(spanSnapshotId: Array<string>, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).getSpanAppInstances(spanSnapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据traceId和spanId查询其内包含的应用日志列表
     * @summary 查询span内应用日志
     * @param {string} traceId 要查询应用日志的traceId
     * @param {string} spanId 要查询应用日志的trace下spanId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public getSpanAppLogs(traceId: string, spanId: string, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).getSpanAppLogs(traceId, spanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定span快照的自身时延趋势统计。  20240208，根据新的产品设计设计该接口。
     * @summary span诊断时延趋势解析
     * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表进行self duration趋势分析。如果有多个快照，可以作为数组参数传入。
     * @param {Array<Percentile>} [percentiles] 需查询的统计比率
     * @param {Array<DurationType>} [durationTypes] 需查询的时延类型：1-自身时延，2-gap时延，3-Trace时延
     * @param {number} [granularity] 解析趋势的时间颗粒度，单位是秒，空表示自动。
     * @param {number} [fromTime] 计算时延趋势的起始时间，UNIX时间戳
     * @param {number} [toTime] 计算时延趋势的截止时间，UNIX时间戳
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public getSpanDurationTrends(spanSnapshotId: Array<string>, percentiles?: Array<Percentile>, durationTypes?: Array<DurationType>, granularity?: number, fromTime?: number, toTime?: number, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).getSpanDurationTrends(spanSnapshotId, percentiles, durationTypes, granularity, fromTime, toTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据预先创建的span快照，对其进行报错解析。  20240208，根据新的产品设计设计该接口。
     * @summary span诊断报错解析
     * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表中应用报错日志进行统计识别。如果有多个快照，可以作为数组参数传入。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public getSpanExceptionAnalysis(spanSnapshotId: Array<string>, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).getSpanExceptionAnalysis(spanSnapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
     * @summary 获取span报错趋势解析
     * @param {string} snapshotId 
     * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public getSpanFaultTrend(snapshotId: string, granularity?: number, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).getSpanFaultTrend(snapshotId, granularity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
     * @summary 获取span热点图趋势解析
     * @param {string} snapshotId 
     * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public getSpanHeatmap(snapshotId: string, granularity?: number, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).getSpanHeatmap(snapshotId, granularity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
     * @summary 获取Trace详情
     * @param {string} traceId UUID，traceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public getTraceDetail(traceId: string, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).getTraceDetail(traceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 初因span列表
     * @param {string} spanSnapshotId span快照ID
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public getTraceFaults(spanSnapshotId: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).getTraceFaults(spanSnapshotId, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据span快照ID、以及给定的分组条件字段（不可为空）生成分组后的多个快照ID。
     * @summary 将span快照按条件分组
     * @param {string} spanSnapshotId 用于进行span快照分组的span父快照ID
     * @param {Array<SpanGroupField> | null} [spanGroupField] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public groupSpanSnapshots(spanSnapshotId: string, spanGroupField?: Array<SpanGroupField> | null, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).groupSpanSnapshots(spanSnapshotId, spanGroupField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 识别指定span快照下所有span五类属性（基本信息、spanAttribuites、resourceAttribuites、requestAttribuites、responseAttribuites)的最大N的共有属性（N是可配置参数，由max_commonality_count指定，默认为6）  20240208，根据新的产品设计新增该接口。
     * @summary 获取span共性识别结果
     * @param {string} snapshotId 用于进行共性分析的span快照ID
     * @param {number} [limit] 用来获取共有属性的个数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public identifySpanCommonalities(snapshotId: string, limit?: number, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).identifySpanCommonalities(snapshotId, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定平面下的应用集群列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造
     * @summary 获取平面下应用集群列表
     * @param {string} platform 平面编码名称（非显示名称）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public listAppClusters(platform: string, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).listAppClusters(platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定平面、指定应用集群下、并在时间段范围内有效的应用实例列表，包含名称和显示名称。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
     * @summary 获取集群下应用实例列表
     * @param {string} platform 望京平面
     * @param {string} cluster 营业厅接入的订单中心
     * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
     * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public listAppInstances(platform: string, cluster: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).listAppInstances(platform, cluster, timeType, fromTime, toTime, recentSeconds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据log快照ID查询出该log快照中的所有log信息列表，用分页表示  20240208，根据新产品原型，新增该接口  20240222，根据讨论结果，改为使用通用查询条件查询
     * @summary 查询Log列表
     * @param {number} [pageNo] 当前页号
     * @param {number} [pageSize] 每页记录数
     * @param {QueryConditions} [queryConditions] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public listAppLogs(pageNo?: number, pageSize?: number, queryConditions?: QueryConditions, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).listAppLogs(pageNo, pageSize, queryConditions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询当前系统支持的查询条件key列表，含中英文名称  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
     * @summary 查询条件key列表
     * @param {number} type 1-span条件；2-log条件；3-metrics条件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public listConditionKeys(type: number, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).listConditionKeys(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询当前系统支持的查询条件某key下可能的取值  20240208，不需要POST方式获得查询条件列表，只需要根据type参数即可。
     * @summary 查询条件某key取值列表
     * @param {number} keyId 查询条件key的主键ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public listConditionValues(keyId: number, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).listConditionValues(keyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获得系统当前的所有数据中心平面列表  获取指定平面下的应用集群列表，包含名称和显示名称。  20240208，按照RESTful规范新增该接口。
     * @summary 获得平面列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public listPlatforms(options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).listPlatforms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定平面、指定应用集群下、并在时间段范围内有效的软件实例列表，包含名称和相关资源。  20240208，将接口进行RESTful规范化改造 20240220 修改时间戳参数为long类型
     * @summary 获取集群下软件实例列表
     * @param {string} platform 望京平面
     * @param {string} software 软件服务在k8s中的deployment名称
     * @param {number} [timeType] 表示哪种时间类型：1-最近时间；2-指定时间段，为空表示不限时间范围
     * @param {number} [fromTime] 指定时间段情况下的起始时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @param {number} [toTime] 指定时间段情况下的截止时间戳，整数，UTC 1970-1-1开始的毫秒数
     * @param {number} [recentSeconds] timeType为1时，最近时间的秒数，整数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public listSoftwareInstances(platform: string, software: string, timeType?: number, fromTime?: number, toTime?: number, recentSeconds?: number, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).listSoftwareInstances(platform, software, timeType, fromTime, toTime, recentSeconds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询所有软件列表，用于显示软件logo等
     * @summary 查询软件列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public listSoftwares(options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).listSoftwares(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 列出指定span快照ID下的子快照条件列表 replace usergroup history
     * @summary 获取span子快照条件列表
     * @param {string} snapshotId 用于创建子快照的父快照ID
     * @param {number} [limit] 获取该用户的span解析记录数，默认情况下服务器最多返回10条
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public listSpanAnalysisConditions(snapshotId: string, limit?: number, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).listSpanAnalysisConditions(snapshotId, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
     * @summary 获取Trace列表
     * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
     * @param {number} [pageNo] 访问页码
     * @param {number} [pageSize] 页面数据量，默认值20
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应使用/spans
     * @summary 按条件查询Span
     * @param {Array<string>} spanSnapshotId span快照ID，如果有多个快照则用数组给出
     * @param {string} [conditions] 在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。
     * @param {number} [pageNo] 查询指定的页号
     * @param {number} [pageSize] 对于每个异常下的报错span，每页显示多少条记录，如果不填写则默认10.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public querySpanBySnapshots(spanSnapshotId: Array<string>, conditions?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).querySpanBySnapshots(spanSnapshotId, conditions, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 20240208，更新查询模板时，可能也会更新模板名称，所以改为使用查询模板请求作为输入。
     * @summary 更新搜索模板
     * @param {string} templateId 传入参数为模板ID，根据模板ID获取搜索条件
     * @param {QueryTemplateRequest} [queryTemplateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240208Api
     */
    public updateQueryTemplate(templateId: string, queryTemplateRequest?: QueryTemplateRequest, options?: AxiosRequestConfig) {
        return Class20240208ApiFp(this.configuration).updateQueryTemplate(templateId, queryTemplateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * Class20240220Api - axios parameter creator
 * @export
 */
export const Class20240220ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceDetail: async (traceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'traceId' is not null or undefined
            assertParamExists('getTraceDetail', 'traceId', traceId)
            const localVarPath = `/traces/{traceId}`
                .replace(`{${"traceId"}}`, encodeURIComponent(String(traceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class20240220Api - functional programming interface
 * @export
 */
export const Class20240220ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class20240220ApiAxiosParamCreator(configuration)
    return {
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTraceDetail(traceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraceDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTraceDetail(traceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240220Api.getTraceDetail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * Class20240220Api - factory interface
 * @export
 */
export const Class20240220ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class20240220ApiFp(configuration)
    return {
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceDetail(traceId: string, options?: any): AxiosPromise<TraceDetailResponse> {
            return localVarFp.getTraceDetail(traceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class20240220Api - object-oriented interface
 * @export
 * @class Class20240220Api
 * @extends {BaseAPI}
 */
export class Class20240220Api extends BaseAPI {
    /**
     * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
     * @summary 获取Trace详情
     * @param {string} traceId UUID，traceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240220Api
     */
    public getTraceDetail(traceId: string, options?: AxiosRequestConfig) {
        return Class20240220ApiFp(this.configuration).getTraceDetail(traceId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * Class20240311Api - axios parameter creator
 * @export
 */
export const Class20240311ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 根据查询条件创建服务地图数据返回，供前端绘制服务地图。  20240208，修改服务地图响应数据结构，并将其包含的span快照功能放到“创建span快照”接口中去。 20240311, 删除参数中的instance节点
         * @summary 创建服务地图
         * @param {ServiceMapRequest} [serviceMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceMap: async (serviceMapRequest?: ServiceMapRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services-map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceMapRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Class20240311Api - functional programming interface
 * @export
 */
export const Class20240311ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Class20240311ApiAxiosParamCreator(configuration)
    return {
        /**
         * 根据查询条件创建服务地图数据返回，供前端绘制服务地图。  20240208，修改服务地图响应数据结构，并将其包含的span快照功能放到“创建span快照”接口中去。 20240311, 删除参数中的instance节点
         * @summary 创建服务地图
         * @param {ServiceMapRequest} [serviceMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceMap(serviceMapRequest?: ServiceMapRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceMapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceMap(serviceMapRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['Class20240311Api.createServiceMap']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * Class20240311Api - factory interface
 * @export
 */
export const Class20240311ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Class20240311ApiFp(configuration)
    return {
        /**
         * 根据查询条件创建服务地图数据返回，供前端绘制服务地图。  20240208，修改服务地图响应数据结构，并将其包含的span快照功能放到“创建span快照”接口中去。 20240311, 删除参数中的instance节点
         * @summary 创建服务地图
         * @param {ServiceMapRequest} [serviceMapRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceMap(serviceMapRequest?: ServiceMapRequest, options?: any): AxiosPromise<ServiceMapResponse> {
            return localVarFp.createServiceMap(serviceMapRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Class20240311Api - object-oriented interface
 * @export
 * @class Class20240311Api
 * @extends {BaseAPI}
 */
export class Class20240311Api extends BaseAPI {
    /**
     * 根据查询条件创建服务地图数据返回，供前端绘制服务地图。  20240208，修改服务地图响应数据结构，并将其包含的span快照功能放到“创建span快照”接口中去。 20240311, 删除参数中的instance节点
     * @summary 创建服务地图
     * @param {ServiceMapRequest} [serviceMapRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class20240311Api
     */
    public createServiceMap(serviceMapRequest?: ServiceMapRequest, options?: AxiosRequestConfig) {
        return Class20240311ApiFp(this.configuration).createServiceMap(serviceMapRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SnapshotsApi - axios parameter creator
 * @export
 */
export const SnapshotsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
         * @summary 创建Span快照
         * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpanSnapshot: async (createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/span-snapshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSpanSnapshotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SnapshotsApi - functional programming interface
 * @export
 */
export const SnapshotsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SnapshotsApiAxiosParamCreator(configuration)
    return {
        /**
         * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
         * @summary 创建Span快照
         * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSpanSnapshot(createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSpanSnapshot(createSpanSnapshotRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SnapshotsApi.createSpanSnapshot']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SnapshotsApi - factory interface
 * @export
 */
export const SnapshotsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SnapshotsApiFp(configuration)
    return {
        /**
         * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
         * @summary 创建Span快照
         * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpanSnapshot(createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.createSpanSnapshot(createSpanSnapshotRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SnapshotsApi - object-oriented interface
 * @export
 * @class SnapshotsApi
 * @extends {BaseAPI}
 */
export class SnapshotsApi extends BaseAPI {
    /**
     * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
     * @summary 创建Span快照
     * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    public createSpanSnapshot(createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options?: AxiosRequestConfig) {
        return SnapshotsApiFp(this.configuration).createSpanSnapshot(createSpanSnapshotRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TraceApi - axios parameter creator
 * @export
 */
export const TraceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
         * @summary 创建Span快照
         * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpanSnapshot: async (createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/span-snapshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSpanSnapshotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据指定的span快照ID、以及颗粒度等条件，为当前登录用户创建Span解析条件  20240208，梳理业务逻辑，新增该接口。该接口用途：1）用于框选趋势图时创建快照；2）用于在服务诊断界面进一步筛选span；
         * @summary 创建span子快照
         * @param {string} snapshotId 用于创建子快照的父快照ID
         * @param {SpanSubSnapshotRequest} [spanSubSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubSpanSnapshot: async (snapshotId: string, spanSubSnapshotRequest?: SpanSubSnapshotRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('createSubSpanSnapshot', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/subSnapshots`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(spanSubSnapshotRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取Span详情
         * @param {string} traceId 
         * @param {string} spanId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanByTraceIdAndSpanId: async (traceId: string, spanId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'traceId' is not null or undefined
            assertParamExists('getSpanByTraceIdAndSpanId', 'traceId', traceId)
            // verify required parameter 'spanId' is not null or undefined
            assertParamExists('getSpanByTraceIdAndSpanId', 'spanId', spanId)
            const localVarPath = `/traces/{traceId}/spans/{spanId}`
                .replace(`{${"traceId"}}`, encodeURIComponent(String(traceId)))
                .replace(`{${"spanId"}}`, encodeURIComponent(String(spanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanFaultTrend: async (snapshotId: string, granularity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSpanFaultTrend', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/fault-trend`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanHeatmap: async (snapshotId: string, granularity?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSpanHeatmap', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/heatmap`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取快照
         * @param {string} snapshotId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanSnapshot: async (snapshotId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('getSpanSnapshot', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取Span列表
         * @param {Array<string>} [spanSnapshotIds] 
         * @param {string} [conditions] 在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。
         * @param {number} [fromTime] 单位ms
         * @param {number} [toTime] 单位ms
         * @param {number} [minDuration] 单位ms
         * @param {number} [maxDuration] 单位ms
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpans: async (spanSnapshotIds?: Array<string>, conditions?: string, fromTime?: number, toTime?: number, minDuration?: number, maxDuration?: number, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/spans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotIds) {
                localVarQueryParameter['spanSnapshotIds'] = spanSnapshotIds;
            }

            if (conditions !== undefined) {
                localVarQueryParameter['conditions'] = conditions;
            }

            if (fromTime !== undefined) {
                localVarQueryParameter['fromTime'] = fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['toTime'] = toTime;
            }

            if (minDuration !== undefined) {
                localVarQueryParameter['minDuration'] = minDuration;
            }

            if (maxDuration !== undefined) {
                localVarQueryParameter['maxDuration'] = maxDuration;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceDetail: async (traceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'traceId' is not null or undefined
            assertParamExists('getTraceDetail', 'traceId', traceId)
            const localVarPath = `/traces/{traceId}`
                .replace(`{${"traceId"}}`, encodeURIComponent(String(traceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Trace服务地图
         * @param {string} traceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceServiceMap: async (traceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'traceId' is not null or undefined
            assertParamExists('getTraceServiceMap', 'traceId', traceId)
            const localVarPath = `/traces/{traceId}/serviceMap`
                .replace(`{${"traceId"}}`, encodeURIComponent(String(traceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 列出指定span快照ID下的子快照条件列表 replace usergroup history
         * @summary 获取span子快照条件列表
         * @param {string} snapshotId 用于创建子快照的父快照ID
         * @param {number} [limit] 获取该用户的span解析记录数，默认情况下服务器最多返回10条
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpanAnalysisConditions: async (snapshotId: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('listSpanAnalysisConditions', 'snapshotId', snapshotId)
            const localVarPath = `/span-snapshots/{snapshotId}/subSnapshots/conditions`
                .replace(`{${"snapshotId"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTracesBySpanSnapshots: async (spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spanSnapshotId' is not null or undefined
            assertParamExists('listTracesBySpanSnapshots', 'spanSnapshotId', spanSnapshotId)
            const localVarPath = `/traces-by-snapshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (spanSnapshotId) {
                localVarQueryParameter['spanSnapshotId'] = spanSnapshotId;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TraceApi - functional programming interface
 * @export
 */
export const TraceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TraceApiAxiosParamCreator(configuration)
    return {
        /**
         * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
         * @summary 创建Span快照
         * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSpanSnapshot(createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSpanSnapshot(createSpanSnapshotRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TraceApi.createSpanSnapshot']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据指定的span快照ID、以及颗粒度等条件，为当前登录用户创建Span解析条件  20240208，梳理业务逻辑，新增该接口。该接口用途：1）用于框选趋势图时创建快照；2）用于在服务诊断界面进一步筛选span；
         * @summary 创建span子快照
         * @param {string} snapshotId 用于创建子快照的父快照ID
         * @param {SpanSubSnapshotRequest} [spanSubSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubSpanSnapshot(snapshotId: string, spanSubSnapshotRequest?: SpanSubSnapshotRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubSpanSnapshot(snapshotId, spanSubSnapshotRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TraceApi.createSubSpanSnapshot']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 获取Span详情
         * @param {string} traceId 
         * @param {string} spanId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanByTraceIdAndSpanId(traceId: string, spanId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpanDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanByTraceIdAndSpanId(traceId, spanId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TraceApi.getSpanByTraceIdAndSpanId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanFaultTrend(snapshotId: string, granularity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaultTrendResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanFaultTrend(snapshotId, granularity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TraceApi.getSpanFaultTrend']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanHeatmap(snapshotId: string, granularity?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeatmapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanHeatmap(snapshotId, granularity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TraceApi.getSpanHeatmap']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 获取快照
         * @param {string} snapshotId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpanSnapshot(snapshotId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpanSnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpanSnapshot(snapshotId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TraceApi.getSpanSnapshot']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 获取Span列表
         * @param {Array<string>} [spanSnapshotIds] 
         * @param {string} [conditions] 在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。
         * @param {number} [fromTime] 单位ms
         * @param {number} [toTime] 单位ms
         * @param {number} [minDuration] 单位ms
         * @param {number} [maxDuration] 单位ms
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpans(spanSnapshotIds?: Array<string>, conditions?: string, fromTime?: number, toTime?: number, minDuration?: number, maxDuration?: number, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpanListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpans(spanSnapshotIds, conditions, fromTime, toTime, minDuration, maxDuration, pageNo, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TraceApi.getSpans']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTraceDetail(traceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraceDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTraceDetail(traceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TraceApi.getTraceDetail']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Trace服务地图
         * @param {string} traceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTraceServiceMap(traceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceMapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTraceServiceMap(traceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TraceApi.getTraceServiceMap']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 列出指定span快照ID下的子快照条件列表 replace usergroup history
         * @summary 获取span子快照条件列表
         * @param {string} snapshotId 用于创建子快照的父快照ID
         * @param {number} [limit] 获取该用户的span解析记录数，默认情况下服务器最多返回10条
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSpanAnalysisConditions(snapshotId: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpanSnapshotConditionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSpanAnalysisConditions(snapshotId, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TraceApi.listSpanAnalysisConditions']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TraceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TraceApi.listTracesBySpanSnapshots']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TraceApi - factory interface
 * @export
 */
export const TraceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TraceApiFp(configuration)
    return {
        /**
         * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
         * @summary 创建Span快照
         * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpanSnapshot(createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.createSpanSnapshot(createSpanSnapshotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据指定的span快照ID、以及颗粒度等条件，为当前登录用户创建Span解析条件  20240208，梳理业务逻辑，新增该接口。该接口用途：1）用于框选趋势图时创建快照；2）用于在服务诊断界面进一步筛选span；
         * @summary 创建span子快照
         * @param {string} snapshotId 用于创建子快照的父快照ID
         * @param {SpanSubSnapshotRequest} [spanSubSnapshotRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubSpanSnapshot(snapshotId: string, spanSubSnapshotRequest?: SpanSubSnapshotRequest, options?: any): AxiosPromise<SnapshotResponse> {
            return localVarFp.createSubSpanSnapshot(snapshotId, spanSubSnapshotRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取Span详情
         * @param {string} traceId 
         * @param {string} spanId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanByTraceIdAndSpanId(traceId: string, spanId: string, options?: any): AxiosPromise<SpanDetailResponse> {
            return localVarFp.getSpanByTraceIdAndSpanId(traceId, spanId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span报错趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanFaultTrend(snapshotId: string, granularity?: number, options?: any): AxiosPromise<FaultTrendResponse> {
            return localVarFp.getSpanFaultTrend(snapshotId, granularity, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
         * @summary 获取span热点图趋势解析
         * @param {string} snapshotId 
         * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanHeatmap(snapshotId: string, granularity?: number, options?: any): AxiosPromise<HeatmapResponse> {
            return localVarFp.getSpanHeatmap(snapshotId, granularity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取快照
         * @param {string} snapshotId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpanSnapshot(snapshotId: string, options?: any): AxiosPromise<SpanSnapshotResponse> {
            return localVarFp.getSpanSnapshot(snapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取Span列表
         * @param {Array<string>} [spanSnapshotIds] 
         * @param {string} [conditions] 在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。
         * @param {number} [fromTime] 单位ms
         * @param {number} [toTime] 单位ms
         * @param {number} [minDuration] 单位ms
         * @param {number} [maxDuration] 单位ms
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpans(spanSnapshotIds?: Array<string>, conditions?: string, fromTime?: number, toTime?: number, minDuration?: number, maxDuration?: number, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<SpanListResponse> {
            return localVarFp.getSpans(spanSnapshotIds, conditions, fromTime, toTime, minDuration, maxDuration, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
         * @summary 获取Trace详情
         * @param {string} traceId UUID，traceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceDetail(traceId: string, options?: any): AxiosPromise<TraceDetailResponse> {
            return localVarFp.getTraceDetail(traceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Trace服务地图
         * @param {string} traceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTraceServiceMap(traceId: string, options?: any): AxiosPromise<ServiceMapResponse> {
            return localVarFp.getTraceServiceMap(traceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 列出指定span快照ID下的子快照条件列表 replace usergroup history
         * @summary 获取span子快照条件列表
         * @param {string} snapshotId 用于创建子快照的父快照ID
         * @param {number} [limit] 获取该用户的span解析记录数，默认情况下服务器最多返回10条
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpanAnalysisConditions(snapshotId: string, limit?: number, options?: any): AxiosPromise<SpanSnapshotConditionListResponse> {
            return localVarFp.listSpanAnalysisConditions(snapshotId, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
         * @summary 获取Trace列表
         * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
         * @param {number} [pageNo] 访问页码
         * @param {number} [pageSize] 页面数据量，默认值20
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<TraceListResponse> {
            return localVarFp.listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TraceApi - object-oriented interface
 * @export
 * @class TraceApi
 * @extends {BaseAPI}
 */
export class TraceApi extends BaseAPI {
    /**
     * 根据条件创建span快照，返回快照ID  20240208，返回通用快照结构
     * @summary 创建Span快照
     * @param {CreateSpanSnapshotRequest} [createSpanSnapshotRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraceApi
     */
    public createSpanSnapshot(createSpanSnapshotRequest?: CreateSpanSnapshotRequest, options?: AxiosRequestConfig) {
        return TraceApiFp(this.configuration).createSpanSnapshot(createSpanSnapshotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据指定的span快照ID、以及颗粒度等条件，为当前登录用户创建Span解析条件  20240208，梳理业务逻辑，新增该接口。该接口用途：1）用于框选趋势图时创建快照；2）用于在服务诊断界面进一步筛选span；
     * @summary 创建span子快照
     * @param {string} snapshotId 用于创建子快照的父快照ID
     * @param {SpanSubSnapshotRequest} [spanSubSnapshotRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraceApi
     */
    public createSubSpanSnapshot(snapshotId: string, spanSubSnapshotRequest?: SpanSubSnapshotRequest, options?: AxiosRequestConfig) {
        return TraceApiFp(this.configuration).createSubSpanSnapshot(snapshotId, spanSubSnapshotRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取Span详情
     * @param {string} traceId 
     * @param {string} spanId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraceApi
     */
    public getSpanByTraceIdAndSpanId(traceId: string, spanId: string, options?: AxiosRequestConfig) {
        return TraceApiFp(this.configuration).getSpanByTraceIdAndSpanId(traceId, spanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定span快照ID所对应span列表的失败趋势（仅限于作为初因失败的span）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
     * @summary 获取span报错趋势解析
     * @param {string} snapshotId 
     * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraceApi
     */
    public getSpanFaultTrend(snapshotId: string, granularity?: number, options?: AxiosRequestConfig) {
        return TraceApiFp(this.configuration).getSpanFaultTrend(snapshotId, granularity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定span快照ID所对应span列表的热点图趋势（基于span的self duration）  20240208 将span快照ID作为PATH参数、增加支持时间颗粒度参数，并根据新产品设计更新响应模型设计。
     * @summary 获取span热点图趋势解析
     * @param {string} snapshotId 
     * @param {number} [granularity] 解析span的时间颗粒度，单位是秒，空表示自动。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraceApi
     */
    public getSpanHeatmap(snapshotId: string, granularity?: number, options?: AxiosRequestConfig) {
        return TraceApiFp(this.configuration).getSpanHeatmap(snapshotId, granularity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取快照
     * @param {string} snapshotId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraceApi
     */
    public getSpanSnapshot(snapshotId: string, options?: AxiosRequestConfig) {
        return TraceApiFp(this.configuration).getSpanSnapshot(snapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取Span列表
     * @param {Array<string>} [spanSnapshotIds] 
     * @param {string} [conditions] 在span快照ID基础上，增加的查询条件，支持SpanAttributes的各类属性作为条件。
     * @param {number} [fromTime] 单位ms
     * @param {number} [toTime] 单位ms
     * @param {number} [minDuration] 单位ms
     * @param {number} [maxDuration] 单位ms
     * @param {number} [pageNo] 访问页码
     * @param {number} [pageSize] 页面数据量，默认值20
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraceApi
     */
    public getSpans(spanSnapshotIds?: Array<string>, conditions?: string, fromTime?: number, toTime?: number, minDuration?: number, maxDuration?: number, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return TraceApiFp(this.configuration).getSpans(spanSnapshotIds, conditions, fromTime, toTime, minDuration, maxDuration, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据traceID查询trace详情.   20231210修改了调用树返回模型，由单个对象该为返回array类型的调用树返回元素 20240208 修改trace详情返回信息内容，支持调用树、服务地图、span信息、resource信息 20240220 修改时间戳格式 
     * @summary 获取Trace详情
     * @param {string} traceId UUID，traceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraceApi
     */
    public getTraceDetail(traceId: string, options?: AxiosRequestConfig) {
        return TraceApiFp(this.configuration).getTraceDetail(traceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Trace服务地图
     * @param {string} traceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraceApi
     */
    public getTraceServiceMap(traceId: string, options?: AxiosRequestConfig) {
        return TraceApiFp(this.configuration).getTraceServiceMap(traceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 列出指定span快照ID下的子快照条件列表 replace usergroup history
     * @summary 获取span子快照条件列表
     * @param {string} snapshotId 用于创建子快照的父快照ID
     * @param {number} [limit] 获取该用户的span解析记录数，默认情况下服务器最多返回10条
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraceApi
     */
    public listSpanAnalysisConditions(snapshotId: string, limit?: number, options?: AxiosRequestConfig) {
        return TraceApiFp(this.configuration).listSpanAnalysisConditions(snapshotId, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 提供span快照ID、及相关附加条件，查询trace列表，支持分页  20231201：修改了TraceBrief的字段类型，spenttime改为duration，totalElements改为total 20240113: 根据需求变更，把traceSnapshotId调整为spanSnapshotId 20240116: 接口改为groupId查询 20240208：接口改为根据span快照Id查询
     * @summary 获取Trace列表
     * @param {Array<string>} spanSnapshotId span快照ID数组，对其内包含的所有span列表提取应用实例资源。如果有多个快照，可以作为数组参数传入。
     * @param {number} [pageNo] 访问页码
     * @param {number} [pageSize] 页面数据量，默认值20
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TraceApi
     */
    public listTracesBySpanSnapshots(spanSnapshotId: Array<string>, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return TraceApiFp(this.configuration).listTracesBySpanSnapshots(spanSnapshotId, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}



